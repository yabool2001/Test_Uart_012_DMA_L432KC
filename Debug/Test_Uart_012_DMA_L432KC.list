
Test_Uart_012_DMA_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ec  080040ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08004100  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004100  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ca8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002867  00000000  00000000  00034ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00037550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00038740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022138  00000000  00000000  00039838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143c7  00000000  00000000  0005b970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1e72  00000000  00000000  0006fd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141ba9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba8  00000000  00000000  00141bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004084 	.word	0x08004084

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004084 	.word	0x08004084

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb53 	bl	8000b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f80c 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f91a 	bl	8000714 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f8fa 	bl	80006d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8c8 	bl	8000678 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80004e8:	f000 f88e 	bl	8000608 <MX_TIM6_Init>
  MX_RTC_Init();
 80004ec:	f000 f864 	bl	80005b8 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x20>
	...

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b096      	sub	sp, #88	; 0x58
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2244      	movs	r2, #68	; 0x44
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f003 fdb6 	bl	8004074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	463b      	mov	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000516:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051a:	f001 f83d 	bl	8001598 <HAL_PWREx_ControlVoltageScaling>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000524:	f000 f978 	bl	8000818 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000528:	f001 f818 	bl	800155c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <SystemClock_Config+0xc0>)
 800052e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000532:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <SystemClock_Config+0xc0>)
 8000534:	f023 0318 	bic.w	r3, r3, #24
 8000538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800053c:	2314      	movs	r3, #20
 800053e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800054c:	2360      	movs	r3, #96	; 0x60
 800054e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000554:	2301      	movs	r3, #1
 8000556:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800055c:	2310      	movs	r3, #16
 800055e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000560:	2307      	movs	r3, #7
 8000562:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	4618      	mov	r0, r3
 8000572:	f001 f867 	bl	8001644 <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800057c:	f000 f94c 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2303      	movs	r3, #3
 8000586:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000594:	463b      	mov	r3, r7
 8000596:	2101      	movs	r1, #1
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fc67 	bl	8001e6c <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005a4:	f000 f938 	bl	8000818 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005a8:	f002 f87a 	bl	80026a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ac:	bf00      	nop
 80005ae:	3758      	adds	r7, #88	; 0x58
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_RTC_Init+0x48>)
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <MX_RTC_Init+0x4c>)
 80005c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_RTC_Init+0x48>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <MX_RTC_Init+0x48>)
 80005ca:	227f      	movs	r2, #127	; 0x7f
 80005cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_RTC_Init+0x48>)
 80005d0:	22ff      	movs	r2, #255	; 0xff
 80005d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_RTC_Init+0x48>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_RTC_Init+0x48>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_RTC_Init+0x48>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_RTC_Init+0x48>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_RTC_Init+0x48>)
 80005ee:	f002 f959 	bl	80028a4 <HAL_RTC_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80005f8:	f000 f90e 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000028 	.word	0x20000028
 8000604:	40002800 	.word	0x40002800

08000608 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_TIM6_Init+0x68>)
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <MX_TIM6_Init+0x6c>)
 800061c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_TIM6_Init+0x68>)
 8000620:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000624:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_TIM6_Init+0x68>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_TIM6_Init+0x68>)
 800062e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000632:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_TIM6_Init+0x68>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800063a:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_TIM6_Init+0x68>)
 800063c:	f002 fa74 	bl	8002b28 <HAL_TIM_Base_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000646:	f000 f8e7 	bl	8000818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <MX_TIM6_Init+0x68>)
 8000658:	f002 fc98 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000662:	f000 f8d9 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000004c 	.word	0x2000004c
 8000674:	40001000 	.word	0x40001000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <MX_USART2_UART_Init+0x5c>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART2_UART_Init+0x58>)
 80006bc:	f002 fcea 	bl	8003094 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c6:	f000 f8a7 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000098 	.word	0x20000098
 80006d4:	40004400 	.word	0x40004400

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_DMA_Init+0x38>)
 80006e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <MX_DMA_Init+0x38>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6493      	str	r3, [r2, #72]	; 0x48
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_DMA_Init+0x38>)
 80006ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2010      	movs	r0, #16
 80006fc:	f000 fb8f 	bl	8000e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000700:	2010      	movs	r0, #16
 8000702:	f000 fba8 	bl	8000e56 <HAL_NVIC_EnableIRQ>

}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_GPIO_Init+0x8c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_GPIO_Init+0x8c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_GPIO_Init+0x8c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_GPIO_Init+0x90>)
 8000778:	f000 fed8 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 800077c:	2308      	movs	r3, #8
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_GPIO_Init+0x90>)
 8000794:	f000 fd60 	bl	8001258 <HAL_GPIO_Init>

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <HAL_TIM_PeriodElapsedCallback>:
{
	return HAL_UART_Transmit ( UART_HANDLER , (uint8_t *) s , l , UART_TX_TIMEOUT ) ;
}

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM_INSTANCE )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d105      	bne.n	80007c6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_TIM_Base_Stop_IT ( &TIM_HANDLER ) ;
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80007bc:	f002 fa0b 	bl	8002bd6 <HAL_TIM_Base_Stop_IT>
		tim_on = 0 ;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
	}
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40001000 	.word	0x40001000
 80007d4:	2000004c 	.word	0x2000004c
 80007d8:	200001c8 	.word	0x200001c8

080007dc <HAL_UARTEx_RxEventCallback>:
	__HAL_DMA_DISABLE_IT ( &hdma_usart2_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
	return r ;
}

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	807b      	strh	r3, [r7, #2]
    if ( huart->Instance == UART_INSTANCE )
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_UARTEx_RxEventCallback+0x30>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <HAL_UARTEx_RxEventCallback+0x24>
    {
    	answer_from_pc = 1 ;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <HAL_UARTEx_RxEventCallback+0x34>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
    	rx_buff[Size] = 0 ;
 80007f8:	887b      	ldrh	r3, [r7, #2]
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <HAL_UARTEx_RxEventCallback+0x38>)
 80007fc:	2100      	movs	r1, #0
 80007fe:	54d1      	strb	r1, [r2, r3]
    }
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40004400 	.word	0x40004400
 8000810:	200001c9 	.word	0x200001c9
 8000814:	20000164 	.word	0x20000164

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	; 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b098      	sub	sp, #96	; 0x60
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2254      	movs	r2, #84	; 0x54
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fbf9 	bl	8004074 <memset>
  if(hrtc->Instance==RTC)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <HAL_RTC_MspInit+0x68>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d11f      	bne.n	80008cc <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800088c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000890:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000896:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fd09 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80008a8:	f7ff ffb6 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_RTC_MspInit+0x6c>)
 80008ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <HAL_RTC_MspInit+0x6c>)
 80008b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 faac 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80008c6:	2003      	movs	r0, #3
 80008c8:	f000 fac5 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	3760      	adds	r7, #96	; 0x60
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40002800 	.word	0x40002800
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <HAL_TIM_Base_MspInit+0x44>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d113      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_TIM_Base_MspInit+0x48>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <HAL_TIM_Base_MspInit+0x48>)
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	6593      	str	r3, [r2, #88]	; 0x58
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_TIM_Base_MspInit+0x48>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2036      	movs	r0, #54	; 0x36
 800090c:	f000 fa87 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000910:	2036      	movs	r0, #54	; 0x36
 8000912:	f000 faa0 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40001000 	.word	0x40001000
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09e      	sub	sp, #120	; 0x78
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	2254      	movs	r2, #84	; 0x54
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f003 fb93 	bl	8004074 <memset>
  if(huart->Instance==USART2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <HAL_UART_MspInit+0x12c>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d179      	bne.n	8000a4c <HAL_UART_MspInit+0x124>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fca5 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000970:	f7ff ff52 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000974:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <HAL_UART_MspInit+0x130>)
 8000976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000978:	4a37      	ldr	r2, [pc, #220]	; (8000a58 <HAL_UART_MspInit+0x130>)
 800097a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097e:	6593      	str	r3, [r2, #88]	; 0x58
 8000980:	4b35      	ldr	r3, [pc, #212]	; (8000a58 <HAL_UART_MspInit+0x130>)
 8000982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <HAL_UART_MspInit+0x130>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	4a31      	ldr	r2, [pc, #196]	; (8000a58 <HAL_UART_MspInit+0x130>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <HAL_UART_MspInit+0x130>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009a4:	2304      	movs	r3, #4
 80009a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b4:	2307      	movs	r3, #7
 80009b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f000 fc49 	bl	8001258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009d8:	2303      	movs	r3, #3
 80009da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fc37 	bl	8001258 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_UART_MspInit+0x134>)
 80009ec:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <HAL_UART_MspInit+0x138>)
 80009ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <HAL_UART_MspInit+0x134>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_UART_MspInit+0x134>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0x134>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_UART_MspInit+0x134>)
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_UART_MspInit+0x134>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_UART_MspInit+0x134>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0x134>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0x134>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a20:	480e      	ldr	r0, [pc, #56]	; (8000a5c <HAL_UART_MspInit+0x134>)
 8000a22:	f000 fa33 	bl	8000e8c <HAL_DMA_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000a2c:	f7ff fef4 	bl	8000818 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_UART_MspInit+0x134>)
 8000a34:	671a      	str	r2, [r3, #112]	; 0x70
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <HAL_UART_MspInit+0x134>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2026      	movs	r0, #38	; 0x26
 8000a42:	f000 f9ec 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a46:	2026      	movs	r0, #38	; 0x26
 8000a48:	f000 fa05 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3778      	adds	r7, #120	; 0x78
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	2000011c 	.word	0x2000011c
 8000a60:	4002006c 	.word	0x4002006c

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 f8ba 	bl	8000c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <RTC_WKUP_IRQHandler+0x10>)
 8000abe:	f002 f803 	bl	8002ac8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000028 	.word	0x20000028

08000acc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <DMA1_Channel6_IRQHandler+0x10>)
 8000ad2:	f000 fb12 	bl	80010fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	2000011c 	.word	0x2000011c

08000ae0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <USART2_IRQHandler+0x10>)
 8000ae6:	f002 fb23 	bl	8003130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000098 	.word	0x20000098

08000af4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <TIM6_DAC_IRQHandler+0x10>)
 8000afa:	f002 f89b 	bl	8002c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000004c 	.word	0x2000004c

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b30:	f7ff ffea 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f003 fa67 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f7ff fcb7 	bl	80004d0 <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b70:	080040f4 	.word	0x080040f4
  ldr r2, =_sbss
 8000b74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b78:	200001d0 	.word	0x200001d0

08000b7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_IRQHandler>

08000b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f93d 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f80e 	bl	8000bb0 <HAL_InitTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	e001      	b.n	8000ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba0:	f7ff fe40 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_InitTick+0x6c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d023      	beq.n	8000c0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_InitTick+0x70>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_InitTick+0x6c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f949 	bl	8000e72 <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10f      	bne.n	8000c06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d809      	bhi.n	8000c00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 f913 	bl	8000e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_InitTick+0x74>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e007      	b.n	8000c10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e004      	b.n	8000c10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
 8000c0a:	e001      	b.n	8000c10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000004 	.word	0x20000004

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	200001cc 	.word	0x200001cc

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200001cc 	.word	0x200001cc

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff8e 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff29 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff3e 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff8e 	bl	8000d5c <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5d 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff31 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffa2 	bl	8000dc4 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e098      	b.n	8000fd0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <HAL_DMA_Init+0x150>)
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d80f      	bhi.n	8000eca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b4b      	ldr	r3, [pc, #300]	; (8000fe0 <HAL_DMA_Init+0x154>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a4b      	ldr	r2, [pc, #300]	; (8000fe4 <HAL_DMA_Init+0x158>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	091b      	lsrs	r3, r3, #4
 8000ebc:	009a      	lsls	r2, r3, #2
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a48      	ldr	r2, [pc, #288]	; (8000fe8 <HAL_DMA_Init+0x15c>)
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec8:	e00e      	b.n	8000ee8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_DMA_Init+0x160>)
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a43      	ldr	r2, [pc, #268]	; (8000fe4 <HAL_DMA_Init+0x158>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	009a      	lsls	r2, r3, #2
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a42      	ldr	r2, [pc, #264]	; (8000ff0 <HAL_DMA_Init+0x164>)
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2202      	movs	r2, #2
 8000eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f42:	d039      	beq.n	8000fb8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <HAL_DMA_Init+0x15c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d11a      	bne.n	8000f84 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f4e:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <HAL_DMA_Init+0x168>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f003 031c 	and.w	r3, r3, #28
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4924      	ldr	r1, [pc, #144]	; (8000ff4 <HAL_DMA_Init+0x168>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <HAL_DMA_Init+0x168>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6859      	ldr	r1, [r3, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f74:	f003 031c 	and.w	r3, r3, #28
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	491d      	ldr	r1, [pc, #116]	; (8000ff4 <HAL_DMA_Init+0x168>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
 8000f82:	e019      	b.n	8000fb8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <HAL_DMA_Init+0x16c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	f003 031c 	and.w	r3, r3, #28
 8000f90:	210f      	movs	r1, #15
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4917      	ldr	r1, [pc, #92]	; (8000ff8 <HAL_DMA_Init+0x16c>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_DMA_Init+0x16c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6859      	ldr	r1, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f003 031c 	and.w	r3, r3, #28
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	4911      	ldr	r1, [pc, #68]	; (8000ff8 <HAL_DMA_Init+0x16c>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40020407 	.word	0x40020407
 8000fe0:	bffdfff8 	.word	0xbffdfff8
 8000fe4:	cccccccd 	.word	0xcccccccd
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	bffdfbf8 	.word	0xbffdfbf8
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	400200a8 	.word	0x400200a8
 8000ff8:	400204a8 	.word	0x400204a8

08000ffc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d008      	beq.n	8001026 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2204      	movs	r2, #4
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e022      	b.n	800106c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 020e 	bic.w	r2, r2, #14
 8001034:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f003 021c 	and.w	r2, r3, #28
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d005      	beq.n	800109c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2204      	movs	r2, #4
 8001094:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
 800109a:	e029      	b.n	80010f0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 020e 	bic.w	r2, r2, #14
 80010aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	f003 021c 	and.w	r2, r3, #28
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	4798      	blx	r3
    }
  }
  return status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f003 031c 	and.w	r3, r3, #28
 800111a:	2204      	movs	r2, #4
 800111c:	409a      	lsls	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d026      	beq.n	8001174 <HAL_DMA_IRQHandler+0x7a>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d021      	beq.n	8001174 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	2b00      	cmp	r3, #0
 800113c:	d107      	bne.n	800114e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0204 	bic.w	r2, r2, #4
 800114c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f003 021c 	and.w	r2, r3, #28
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	2104      	movs	r1, #4
 800115c:	fa01 f202 	lsl.w	r2, r1, r2
 8001160:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	2b00      	cmp	r3, #0
 8001168:	d071      	beq.n	800124e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001172:	e06c      	b.n	800124e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f003 031c 	and.w	r3, r3, #28
 800117c:	2202      	movs	r2, #2
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d02e      	beq.n	80011e6 <HAL_DMA_IRQHandler+0xec>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d029      	beq.n	80011e6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 020a 	bic.w	r2, r2, #10
 80011ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	f003 021c 	and.w	r2, r3, #28
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	2102      	movs	r1, #2
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d038      	beq.n	800124e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011e4:	e033      	b.n	800124e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f003 031c 	and.w	r3, r3, #28
 80011ee:	2208      	movs	r2, #8
 80011f0:	409a      	lsls	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d02a      	beq.n	8001250 <HAL_DMA_IRQHandler+0x156>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d025      	beq.n	8001250 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 020e 	bic.w	r2, r2, #14
 8001212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	f003 021c 	and.w	r2, r3, #28
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800124e:	bf00      	nop
 8001250:	bf00      	nop
}
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001266:	e148      	b.n	80014fa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	4013      	ands	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 813a 	beq.w	80014f4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d005      	beq.n	8001298 <HAL_GPIO_Init+0x40>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d130      	bne.n	80012fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ce:	2201      	movs	r2, #1
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f003 0201 	and.w	r2, r3, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b03      	cmp	r3, #3
 8001304:	d017      	beq.n	8001336 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d123      	bne.n	800138a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	6939      	ldr	r1, [r7, #16]
 8001386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0203 	and.w	r2, r3, #3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8094 	beq.w	80014f4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013cc:	4b52      	ldr	r3, [pc, #328]	; (8001518 <HAL_GPIO_Init+0x2c0>)
 80013ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d0:	4a51      	ldr	r2, [pc, #324]	; (8001518 <HAL_GPIO_Init+0x2c0>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6613      	str	r3, [r2, #96]	; 0x60
 80013d8:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <HAL_GPIO_Init+0x2c0>)
 80013da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_GPIO_Init+0x2c4>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	3302      	adds	r3, #2
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800140e:	d00d      	beq.n	800142c <HAL_GPIO_Init+0x1d4>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a43      	ldr	r2, [pc, #268]	; (8001520 <HAL_GPIO_Init+0x2c8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0x1d0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a42      	ldr	r2, [pc, #264]	; (8001524 <HAL_GPIO_Init+0x2cc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_GPIO_Init+0x1cc>
 8001420:	2302      	movs	r3, #2
 8001422:	e004      	b.n	800142e <HAL_GPIO_Init+0x1d6>
 8001424:	2307      	movs	r3, #7
 8001426:	e002      	b.n	800142e <HAL_GPIO_Init+0x1d6>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_GPIO_Init+0x1d6>
 800142c:	2300      	movs	r3, #0
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800143e:	4937      	ldr	r1, [pc, #220]	; (800151c <HAL_GPIO_Init+0x2c4>)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001470:	4a2d      	ldr	r2, [pc, #180]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800149a:	4a23      	ldr	r2, [pc, #140]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c4:	4a18      	ldr	r2, [pc, #96]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_GPIO_Init+0x2d0>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	f47f aeaf 	bne.w	8001268 <HAL_GPIO_Init+0x10>
  }
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000
 8001520:	48000400 	.word	0x48000400
 8001524:	48000800 	.word	0x48000800
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001548:	e002      	b.n	8001550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40007000 	.word	0x40007000

0800157c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <HAL_PWREx_GetVoltageRange+0x18>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40007000 	.word	0x40007000

08001598 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a6:	d130      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b4:	d038      	beq.n	8001628 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2232      	movs	r2, #50	; 0x32
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0c9b      	lsrs	r3, r3, #18
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015dc:	e002      	b.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f0:	d102      	bne.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f2      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001604:	d110      	bne.n	8001628 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e00f      	b.n	800162a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001616:	d007      	beq.n	8001628 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001626:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40007000 	.word	0x40007000
 800163c:	20000000 	.word	0x20000000
 8001640:	431bde83 	.word	0x431bde83

08001644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	f000 bc02 	b.w	8001e5c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001658:	4b96      	ldr	r3, [pc, #600]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 030c 	and.w	r3, r3, #12
 8001660:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001662:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80e4 	beq.w	8001842 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <HAL_RCC_OscConfig+0x4c>
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b0c      	cmp	r3, #12
 8001684:	f040 808b 	bne.w	800179e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b01      	cmp	r3, #1
 800168c:	f040 8087 	bne.w	800179e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001690:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x64>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e3d9      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	4b81      	ldr	r3, [pc, #516]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <HAL_RCC_OscConfig+0x7e>
 80016b8:	4b7e      	ldr	r3, [pc, #504]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c0:	e005      	b.n	80016ce <HAL_RCC_OscConfig+0x8a>
 80016c2:	4b7c      	ldr	r3, [pc, #496]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d223      	bcs.n	800171a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fd8c 	bl	80021f4 <RCC_SetFlashLatencyFromMSIRange>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e3ba      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e6:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a72      	ldr	r2, [pc, #456]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b70      	ldr	r3, [pc, #448]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	496d      	ldr	r1, [pc, #436]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001704:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	4968      	ldr	r1, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	e025      	b.n	8001766 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800171a:	4b66      	ldr	r3, [pc, #408]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a65      	ldr	r2, [pc, #404]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4960      	ldr	r1, [pc, #384]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001734:	4313      	orrs	r3, r2
 8001736:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001738:	4b5e      	ldr	r3, [pc, #376]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	495b      	ldr	r1, [pc, #364]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fd4c 	bl	80021f4 <RCC_SetFlashLatencyFromMSIRange>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e37a      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001766:	f000 fc81 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b51      	ldr	r3, [pc, #324]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	4950      	ldr	r1, [pc, #320]	; (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	4a4e      	ldr	r2, [pc, #312]	; (80018bc <HAL_RCC_OscConfig+0x278>)
 8001784:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001786:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <HAL_RCC_OscConfig+0x27c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fa10 	bl	8000bb0 <HAL_InitTick>
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d052      	beq.n	8001840 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	e35e      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d032      	beq.n	800180c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017a6:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fa4d 	bl	8000c50 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ba:	f7ff fa49 	bl	8000c50 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e347      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a35      	ldr	r2, [pc, #212]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4930      	ldr	r1, [pc, #192]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f6:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	492b      	ldr	r1, [pc, #172]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
 800180a:	e01a      	b.n	8001842 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800180c:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a28      	ldr	r2, [pc, #160]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001818:	f7ff fa1a 	bl	8000c50 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001820:	f7ff fa16 	bl	8000c50 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e314      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x1dc>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d073      	beq.n	8001936 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d005      	beq.n	8001860 <HAL_RCC_OscConfig+0x21c>
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d10e      	bne.n	8001878 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d063      	beq.n	8001934 <HAL_RCC_OscConfig+0x2f0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d15f      	bne.n	8001934 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e2f1      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x24c>
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e025      	b.n	80018dc <HAL_RCC_OscConfig+0x298>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001898:	d114      	bne.n	80018c4 <HAL_RCC_OscConfig+0x280>
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a02      	ldr	r2, [pc, #8]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e013      	b.n	80018dc <HAL_RCC_OscConfig+0x298>
 80018b4:	40021000 	.word	0x40021000
 80018b8:	0800409c 	.word	0x0800409c
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004
 80018c4:	4ba0      	ldr	r3, [pc, #640]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a9f      	ldr	r2, [pc, #636]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b9d      	ldr	r3, [pc, #628]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a9c      	ldr	r2, [pc, #624]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d013      	beq.n	800190c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff f9b4 	bl	8000c50 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff f9b0 	bl	8000c50 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e2ae      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fe:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x2a8>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff f9a0 	bl	8000c50 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff f99c 	bl	8000c50 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e29a      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001926:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x2d0>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d060      	beq.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d005      	beq.n	8001954 <HAL_RCC_OscConfig+0x310>
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d119      	bne.n	8001982 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d116      	bne.n	8001982 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001954:	4b7c      	ldr	r3, [pc, #496]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x328>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e277      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196c:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	4973      	ldr	r1, [pc, #460]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	e040      	b.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d023      	beq.n	80019d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198a:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff f95b 	bl	8000c50 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff f957 	bl	8000c50 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e255      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b0:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	061b      	lsls	r3, r3, #24
 80019ca:	495f      	ldr	r1, [pc, #380]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
 80019d0:	e018      	b.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a5c      	ldr	r2, [pc, #368]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80019d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff f937 	bl	8000c50 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff f933 	bl	8000c50 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e231      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d03c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a18:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1e:	4a4a      	ldr	r2, [pc, #296]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff f912 	bl	8000c50 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff f90e 	bl	8000c50 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e20c      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a42:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0ef      	beq.n	8001a30 <HAL_RCC_OscConfig+0x3ec>
 8001a50:	e01b      	b.n	8001a8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a58:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	f023 0301 	bic.w	r3, r3, #1
 8001a5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff f8f5 	bl	8000c50 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f8f1 	bl	8000c50 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1ef      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a7c:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ef      	bne.n	8001a6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 80a6 	beq.w	8001be4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa8:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <HAL_RCC_OscConfig+0x508>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d118      	bne.n	8001b02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_RCC_OscConfig+0x508>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_RCC_OscConfig+0x508>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001adc:	f7ff f8b8 	bl	8000c50 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae4:	f7ff f8b4 	bl	8000c50 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1b2      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_RCC_OscConfig+0x508>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4d8>
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b1a:	e029      	b.n	8001b70 <HAL_RCC_OscConfig+0x52c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d115      	bne.n	8001b50 <HAL_RCC_OscConfig+0x50c>
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3a:	4a03      	ldr	r2, [pc, #12]	; (8001b48 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b44:	e014      	b.n	8001b70 <HAL_RCC_OscConfig+0x52c>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	4b9a      	ldr	r3, [pc, #616]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a99      	ldr	r2, [pc, #612]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	4b96      	ldr	r3, [pc, #600]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a95      	ldr	r2, [pc, #596]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d016      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff f86a 	bl	8000c50 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7ff f866 	bl	8000c50 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e162      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b96:	4b89      	ldr	r3, [pc, #548]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ed      	beq.n	8001b80 <HAL_RCC_OscConfig+0x53c>
 8001ba4:	e015      	b.n	8001bd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f853 	bl	8000c50 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff f84f 	bl	8000c50 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e14b      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc4:	4b7d      	ldr	r3, [pc, #500]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1ed      	bne.n	8001bae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bd2:	7ffb      	ldrb	r3, [r7, #31]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd8:	4b78      	ldr	r3, [pc, #480]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d03c      	beq.n	8001c6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bf8:	4b70      	ldr	r3, [pc, #448]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bfe:	4a6f      	ldr	r2, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7ff f822 	bl	8000c50 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c10:	f7ff f81e 	bl	8000c50 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e11c      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c22:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ef      	beq.n	8001c10 <HAL_RCC_OscConfig+0x5cc>
 8001c30:	e01b      	b.n	8001c6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c32:	4b62      	ldr	r3, [pc, #392]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c38:	4a60      	ldr	r2, [pc, #384]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7ff f805 	bl	8000c50 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c4a:	f7ff f801 	bl	8000c50 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0ff      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c5c:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ef      	bne.n	8001c4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80f3 	beq.w	8001e5a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	f040 80c9 	bne.w	8001e10 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c7e:	4b4f      	ldr	r3, [pc, #316]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 0203 	and.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d12c      	bne.n	8001cec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d123      	bne.n	8001cec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d11b      	bne.n	8001cec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d113      	bne.n	8001cec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d109      	bne.n	8001cec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d06b      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d062      	beq.n	8001db8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cf2:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0ac      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a2d      	ldr	r2, [pc, #180]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d0e:	f7fe ff9f 	bl	8000c50 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe ff9b 	bl	8000c50 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e099      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_RCC_OscConfig+0x77c>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d44:	3a01      	subs	r2, #1
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	4311      	orrs	r1, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d4e:	0212      	lsls	r2, r2, #8
 8001d50:	4311      	orrs	r1, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d56:	0852      	lsrs	r2, r2, #1
 8001d58:	3a01      	subs	r2, #1
 8001d5a:	0552      	lsls	r2, r2, #21
 8001d5c:	4311      	orrs	r1, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d62:	0852      	lsrs	r2, r2, #1
 8001d64:	3a01      	subs	r2, #1
 8001d66:	0652      	lsls	r2, r2, #25
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d6e:	06d2      	lsls	r2, r2, #27
 8001d70:	430a      	orrs	r2, r1
 8001d72:	4912      	ldr	r1, [pc, #72]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0f      	ldr	r2, [pc, #60]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d90:	f7fe ff5e 	bl	8000c50 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe ff5a 	bl	8000c50 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e058      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db6:	e050      	b.n	8001e5a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e04f      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc4:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d144      	bne.n	8001e5a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001de8:	f7fe ff32 	bl	8000c50 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7fe ff2e 	bl	8000c50 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e02c      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x7ac>
 8001e0e:	e024      	b.n	8001e5a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	d01f      	beq.n	8001e56 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7fe ff15 	bl	8000c50 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7fe ff11 	bl	8000c50 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4905      	ldr	r1, [pc, #20]	; (8001e64 <HAL_RCC_OscConfig+0x820>)
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_RCC_OscConfig+0x824>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
 8001e54:	e001      	b.n	8001e5a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	feeefffc 	.word	0xfeeefffc

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0e7      	b.n	8002050 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b75      	ldr	r3, [pc, #468]	; (8002058 <HAL_RCC_ClockConfig+0x1ec>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b72      	ldr	r3, [pc, #456]	; (8002058 <HAL_RCC_ClockConfig+0x1ec>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 0207 	bic.w	r2, r3, #7
 8001e96:	4970      	ldr	r1, [pc, #448]	; (8002058 <HAL_RCC_ClockConfig+0x1ec>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b6e      	ldr	r3, [pc, #440]	; (8002058 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0cf      	b.n	8002050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	4b66      	ldr	r3, [pc, #408]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d908      	bls.n	8001ede <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4960      	ldr	r1, [pc, #384]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d04c      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d121      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0a6      	b.n	8002050 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	4b54      	ldr	r3, [pc, #336]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d115      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e09a      	b.n	8002050 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f22:	4b4e      	ldr	r3, [pc, #312]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e08e      	b.n	8002050 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f32:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e086      	b.n	8002050 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f42:	4b46      	ldr	r3, [pc, #280]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4943      	ldr	r1, [pc, #268]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f54:	f7fe fe7c 	bl	8000c50 <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7fe fe78 	bl	8000c50 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e06e      	b.n	8002050 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b3a      	ldr	r3, [pc, #232]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 020c 	and.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1eb      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d010      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	4b31      	ldr	r3, [pc, #196]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d208      	bcs.n	8001fb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	492b      	ldr	r1, [pc, #172]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_RCC_ClockConfig+0x1ec>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d210      	bcs.n	8001fe2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_ClockConfig+0x1ec>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 0207 	bic.w	r2, r3, #7
 8001fc8:	4923      	ldr	r1, [pc, #140]	; (8002058 <HAL_RCC_ClockConfig+0x1ec>)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e036      	b.n	8002050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4918      	ldr	r1, [pc, #96]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4910      	ldr	r1, [pc, #64]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002020:	f000 f824 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	490b      	ldr	r1, [pc, #44]	; (8002060 <HAL_RCC_ClockConfig+0x1f4>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
 800203c:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1f8>)
 800203e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1fc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fdb3 	bl	8000bb0 <HAL_InitTick>
 800204a:	4603      	mov	r3, r0
 800204c:	72fb      	strb	r3, [r7, #11]

  return status;
 800204e:	7afb      	ldrb	r3, [r7, #11]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40022000 	.word	0x40022000
 800205c:	40021000 	.word	0x40021000
 8002060:	0800409c 	.word	0x0800409c
 8002064:	20000000 	.word	0x20000000
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207a:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002084:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d121      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d11e      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020a0:	4b34      	ldr	r3, [pc, #208]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e005      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020c8:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10d      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d102      	bne.n	80020ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <HAL_RCC_GetSysClockFreq+0x110>)
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	e004      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_RCC_GetSysClockFreq+0x114>)
 80020f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d134      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0xa6>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d003      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0xac>
 8002110:	e005      	b.n	800211e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_GetSysClockFreq+0x110>)
 8002114:	617b      	str	r3, [r7, #20]
      break;
 8002116:	e005      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_GetSysClockFreq+0x114>)
 800211a:	617b      	str	r3, [r7, #20]
      break;
 800211c:	e002      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	617b      	str	r3, [r7, #20]
      break;
 8002122:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	3301      	adds	r3, #1
 8002130:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	fb03 f202 	mul.w	r2, r3, r2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	0e5b      	lsrs	r3, r3, #25
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	3301      	adds	r3, #1
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002164:	69bb      	ldr	r3, [r7, #24]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	080040b4 	.word	0x080040b4
 800217c:	00f42400 	.word	0x00f42400
 8002180:	007a1200 	.word	0x007a1200

08002184 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_RCC_GetHCLKFreq+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000000 	.word	0x20000000

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021a0:	f7ff fff0 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4904      	ldr	r1, [pc, #16]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	080040ac 	.word	0x080040ac

080021c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021cc:	f7ff ffda 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0adb      	lsrs	r3, r3, #11
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	080040ac 	.word	0x080040ac

080021f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800220c:	f7ff f9b6 	bl	800157c <HAL_PWREx_GetVoltageRange>
 8002210:	6178      	str	r0, [r7, #20]
 8002212:	e014      	b.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	4a24      	ldr	r2, [pc, #144]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6593      	str	r3, [r2, #88]	; 0x58
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800222c:	f7ff f9a6 	bl	800157c <HAL_PWREx_GetVoltageRange>
 8002230:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002244:	d10b      	bne.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d919      	bls.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2ba0      	cmp	r3, #160	; 0xa0
 8002250:	d902      	bls.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002252:	2302      	movs	r3, #2
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	e013      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e010      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d902      	bls.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002264:	2303      	movs	r3, #3
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e00a      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b80      	cmp	r3, #128	; 0x80
 800226e:	d102      	bne.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002270:	2302      	movs	r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	e004      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b70      	cmp	r3, #112	; 0x70
 800227a:	d101      	bne.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800227c:	2301      	movs	r3, #1
 800227e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 0207 	bic.w	r2, r3, #7
 8002288:	4909      	ldr	r1, [pc, #36]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40022000 	.word	0x40022000

080022b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022bc:	2300      	movs	r3, #0
 80022be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c0:	2300      	movs	r3, #0
 80022c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d031      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d8:	d01a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022de:	d814      	bhi.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e8:	d10f      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80022ea:	4b5d      	ldr	r3, [pc, #372]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4a5c      	ldr	r2, [pc, #368]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f6:	e00c      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3304      	adds	r3, #4
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f9de 	bl	80026c0 <RCCEx_PLLSAI1_Config>
 8002304:	4603      	mov	r3, r0
 8002306:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002308:	e003      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	74fb      	strb	r3, [r7, #19]
      break;
 800230e:	e000      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002318:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	494e      	ldr	r1, [pc, #312]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800232e:	e001      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 809e 	beq.w	800247e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002346:	4b46      	ldr	r3, [pc, #280]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002356:	2300      	movs	r3, #0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	4a3f      	ldr	r2, [pc, #252]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002366:	6593      	str	r3, [r2, #88]	; 0x58
 8002368:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002378:	4b3a      	ldr	r3, [pc, #232]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a39      	ldr	r2, [pc, #228]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002384:	f7fe fc64 	bl	8000c50 <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800238a:	e009      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7fe fc60 	bl	8000c50 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d902      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	74fb      	strb	r3, [r7, #19]
        break;
 800239e:	e005      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ef      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d15a      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023b2:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01e      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d019      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023fa:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d016      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fc20 	bl	8000c50 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	e00b      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fc1c 	bl	8000c50 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d902      	bls.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	74fb      	strb	r3, [r7, #19]
            break;
 800242a:	e006      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0ec      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	4904      	ldr	r1, [pc, #16]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002456:	e009      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
 800245c:	e006      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246c:	7c7b      	ldrb	r3, [r7, #17]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d105      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b8a      	ldr	r3, [pc, #552]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	4a89      	ldr	r2, [pc, #548]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248a:	4b84      	ldr	r3, [pc, #528]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f023 0203 	bic.w	r2, r3, #3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4980      	ldr	r1, [pc, #512]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ac:	4b7b      	ldr	r3, [pc, #492]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f023 020c 	bic.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	4978      	ldr	r1, [pc, #480]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ce:	4b73      	ldr	r3, [pc, #460]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	496f      	ldr	r1, [pc, #444]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024f0:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fe:	4967      	ldr	r1, [pc, #412]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002512:	4b62      	ldr	r3, [pc, #392]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	495e      	ldr	r1, [pc, #376]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	4956      	ldr	r1, [pc, #344]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	494d      	ldr	r1, [pc, #308]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d028      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002578:	4b48      	ldr	r3, [pc, #288]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4945      	ldr	r1, [pc, #276]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002596:	d106      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a3f      	ldr	r2, [pc, #252]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a2:	60d3      	str	r3, [r2, #12]
 80025a4:	e011      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ae:	d10c      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	2101      	movs	r1, #1
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f882 	bl	80026c0 <RCCEx_PLLSAI1_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d028      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d6:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	492d      	ldr	r1, [pc, #180]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025f4:	d106      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f6:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	4a28      	ldr	r2, [pc, #160]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002600:	60d3      	str	r3, [r2, #12]
 8002602:	e011      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800260c:	d10c      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f853 	bl	80026c0 <RCCEx_PLLSAI1_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01c      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002642:	4916      	ldr	r1, [pc, #88]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002652:	d10c      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3304      	adds	r3, #4
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f830 	bl	80026c0 <RCCEx_PLLSAI1_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	4904      	ldr	r1, [pc, #16]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002690:	7cbb      	ldrb	r3, [r7, #18]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a04      	ldr	r2, [pc, #16]	; (80026bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80026aa:	f043 0304 	orr.w	r3, r3, #4
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000

080026c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ce:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d018      	beq.n	800270c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026da:	4b71      	ldr	r3, [pc, #452]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0203 	and.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d10d      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
       ||
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026f2:	4b6b      	ldr	r3, [pc, #428]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
       ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d047      	beq.n	8002796 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
 800270a:	e044      	b.n	8002796 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d018      	beq.n	8002746 <RCCEx_PLLSAI1_Config+0x86>
 8002714:	2b03      	cmp	r3, #3
 8002716:	d825      	bhi.n	8002764 <RCCEx_PLLSAI1_Config+0xa4>
 8002718:	2b01      	cmp	r3, #1
 800271a:	d002      	beq.n	8002722 <RCCEx_PLLSAI1_Config+0x62>
 800271c:	2b02      	cmp	r3, #2
 800271e:	d009      	beq.n	8002734 <RCCEx_PLLSAI1_Config+0x74>
 8002720:	e020      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002722:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d11d      	bne.n	800276a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002732:	e01a      	b.n	800276a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002734:	4b5a      	ldr	r3, [pc, #360]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d116      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002744:	e013      	b.n	800276e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002746:	4b56      	ldr	r3, [pc, #344]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002752:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002762:	e006      	b.n	8002772 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      break;
 8002768:	e004      	b.n	8002774 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002772:	bf00      	nop
    }

    if(status == HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800277a:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6819      	ldr	r1, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	430b      	orrs	r3, r1
 8002790:	4943      	ldr	r1, [pc, #268]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002792:	4313      	orrs	r3, r2
 8002794:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d17c      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800279c:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a8:	f7fe fa52 	bl	8000c50 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ae:	e009      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027b0:	f7fe fa4e 	bl	8000c50 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d902      	bls.n	80027c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	73fb      	strb	r3, [r7, #15]
        break;
 80027c2:	e005      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027c4:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ef      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d15f      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d110      	bne.n	80027fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6892      	ldr	r2, [r2, #8]
 80027ec:	0211      	lsls	r1, r2, #8
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68d2      	ldr	r2, [r2, #12]
 80027f2:	06d2      	lsls	r2, r2, #27
 80027f4:	430a      	orrs	r2, r1
 80027f6:	492a      	ldr	r1, [pc, #168]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	610b      	str	r3, [r1, #16]
 80027fc:	e027      	b.n	800284e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d112      	bne.n	800282a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800280c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6892      	ldr	r2, [r2, #8]
 8002814:	0211      	lsls	r1, r2, #8
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6912      	ldr	r2, [r2, #16]
 800281a:	0852      	lsrs	r2, r2, #1
 800281c:	3a01      	subs	r2, #1
 800281e:	0552      	lsls	r2, r2, #21
 8002820:	430a      	orrs	r2, r1
 8002822:	491f      	ldr	r1, [pc, #124]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	610b      	str	r3, [r1, #16]
 8002828:	e011      	b.n	800284e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002832:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6892      	ldr	r2, [r2, #8]
 800283a:	0211      	lsls	r1, r2, #8
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6952      	ldr	r2, [r2, #20]
 8002840:	0852      	lsrs	r2, r2, #1
 8002842:	3a01      	subs	r2, #1
 8002844:	0652      	lsls	r2, r2, #25
 8002846:	430a      	orrs	r2, r1
 8002848:	4915      	ldr	r1, [pc, #84]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002854:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002858:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe f9f9 	bl	8000c50 <HAL_GetTick>
 800285e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002860:	e009      	b.n	8002876 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002862:	f7fe f9f5 	bl	8000c50 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d902      	bls.n	8002876 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	73fb      	strb	r3, [r7, #15]
          break;
 8002874:	e005      	b.n	8002882 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ef      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000

080028a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d06c      	beq.n	8002990 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd ffce 	bl	800086c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	22ca      	movs	r2, #202	; 0xca
 80028de:	625a      	str	r2, [r3, #36]	; 0x24
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2253      	movs	r2, #83	; 0x53
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f87c 	bl	80029e6 <RTC_EnterInitMode>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d14b      	bne.n	8002990 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800290a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6899      	ldr	r1, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6919      	ldr	r1, [r3, #16]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	041a      	lsls	r2, r3, #16
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f87f 	bl	8002a4c <RTC_ExitInitMode>
 800294e:	4603      	mov	r3, r0
 8002950:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11b      	bne.n	8002990 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0203 	bic.w	r2, r2, #3
 8002966:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	22ff      	movs	r2, #255	; 0xff
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029b0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80029b2:	f7fe f94d 	bl	8000c50 <HAL_GetTick>
 80029b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029b8:	e009      	b.n	80029ce <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029ba:	f7fe f949 	bl	8000c50 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029c8:	d901      	bls.n	80029ce <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e007      	b.n	80029de <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ee      	beq.n	80029ba <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d120      	bne.n	8002a42 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002a0a:	f7fe f921 	bl	8000c50 <HAL_GetTick>
 8002a0e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a10:	e00d      	b.n	8002a2e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002a12:	f7fe f91d 	bl	8000c50 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a20:	d905      	bls.n	8002a2e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2203      	movs	r2, #3
 8002a2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <RTC_EnterInitMode+0x5c>
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d1e7      	bne.n	8002a12 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <RTC_ExitInitMode+0x78>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <RTC_ExitInitMode+0x78>)
 8002a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a62:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <RTC_ExitInitMode+0x78>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10c      	bne.n	8002a8a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff92 	bl	800299a <HAL_RTC_WaitForSynchro>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01e      	beq.n	8002aba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2203      	movs	r2, #3
 8002a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e017      	b.n	8002aba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <RTC_ExitInitMode+0x78>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <RTC_ExitInitMode+0x78>)
 8002a90:	f023 0320 	bic.w	r3, r3, #32
 8002a94:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ff7f 	bl	800299a <HAL_RTC_WaitForSynchro>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <RTC_ExitInitMode+0x78>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <RTC_ExitInitMode+0x78>)
 8002ab4:	f043 0320 	orr.w	r3, r3, #32
 8002ab8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40002800 	.word	0x40002800

08002ac8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002ad2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ad6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002af6:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f80b 	bl	8002b14 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e049      	b.n	8002bce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fd fec4 	bl	80008dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f000 f9ac 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0201 	bic.w	r2, r2, #1
 8002bec:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <HAL_TIM_Base_Stop_IT+0x48>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	f240 4344 	movw	r3, #1092	; 0x444
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_Base_Stop_IT+0x48>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d122      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0202 	mvn.w	r2, #2
 8002c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f905 	bl	8002e86 <HAL_TIM_IC_CaptureCallback>
 8002c7c:	e005      	b.n	8002c8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f8f7 	bl	8002e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f908 	bl	8002e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d122      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d11b      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0204 	mvn.w	r2, #4
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8db 	bl	8002e86 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f8cd 	bl	8002e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f8de 	bl	8002e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d122      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d11b      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0208 	mvn.w	r2, #8
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8b1 	bl	8002e86 <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f8a3 	bl	8002e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f8b4 	bl	8002e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b10      	cmp	r3, #16
 8002d44:	d122      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d11b      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0210 	mvn.w	r2, #16
 8002d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2208      	movs	r2, #8
 8002d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f887 	bl	8002e86 <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f879 	bl	8002e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f88a 	bl	8002e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d10e      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d107      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0201 	mvn.w	r2, #1
 8002db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fd fcf8 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc2:	2b80      	cmp	r3, #128	; 0x80
 8002dc4:	d10e      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d107      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f944 	bl	800306c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df2:	d10e      	bne.n	8002e12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b80      	cmp	r3, #128	; 0x80
 8002e00:	d107      	bne.n	8002e12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f937 	bl	8003080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d10e      	bne.n	8002e3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d107      	bne.n	8002e3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f838 	bl	8002eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d10e      	bne.n	8002e6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d107      	bne.n	8002e6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f06f 0220 	mvn.w	r2, #32
 8002e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f8f7 	bl	8003058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a2a      	ldr	r2, [pc, #168]	; (8002f80 <TIM_Base_SetConfig+0xbc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_Base_SetConfig+0x20>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d108      	bne.n	8002ef6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a21      	ldr	r2, [pc, #132]	; (8002f80 <TIM_Base_SetConfig+0xbc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <TIM_Base_SetConfig+0x52>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f04:	d007      	beq.n	8002f16 <TIM_Base_SetConfig+0x52>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <TIM_Base_SetConfig+0x52>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <TIM_Base_SetConfig+0xc4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d108      	bne.n	8002f28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <TIM_Base_SetConfig+0xbc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <TIM_Base_SetConfig+0xa0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_Base_SetConfig+0xa0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <TIM_Base_SetConfig+0xc4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	615a      	str	r2, [r3, #20]
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40014400 	.word	0x40014400

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e04f      	b.n	8003044 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a21      	ldr	r2, [pc, #132]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d108      	bne.n	8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a14      	ldr	r2, [pc, #80]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d004      	beq.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a10      	ldr	r2, [pc, #64]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d10c      	bne.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800301e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	4313      	orrs	r3, r2
 8003028:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40012c00 	.word	0x40012c00
 8003054:	40014000 	.word	0x40014000

08003058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e040      	b.n	8003128 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fc36 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2224      	movs	r2, #36	; 0x24
 80030c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fb22 	bl	800371c <UART_SetConfig>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e022      	b.n	8003128 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fd42 	bl	8003b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800310e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fdc9 	bl	8003cb8 <UART_CheckIdleState>
 8003126:	4603      	mov	r3, r0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b0ba      	sub	sp, #232	; 0xe8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003156:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800315a:	f640 030f 	movw	r3, #2063	; 0x80f
 800315e:	4013      	ands	r3, r2
 8003160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d115      	bne.n	8003198 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800316c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00f      	beq.n	8003198 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 82a6 	beq.w	80036da <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
      }
      return;
 8003196:	e2a0      	b.n	80036da <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8117 	beq.w	80033d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80031b2:	4b85      	ldr	r3, [pc, #532]	; (80033c8 <HAL_UART_IRQHandler+0x298>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 810a 	beq.w	80033d0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d011      	beq.n	80031ec <HAL_UART_IRQHandler+0xbc>
 80031c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2201      	movs	r2, #1
 80031da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d011      	beq.n	800321c <HAL_UART_IRQHandler+0xec>
 80031f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2202      	movs	r2, #2
 800320a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003212:	f043 0204 	orr.w	r2, r3, #4
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800321c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d011      	beq.n	800324c <HAL_UART_IRQHandler+0x11c>
 8003228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2204      	movs	r2, #4
 800323a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003242:	f043 0202 	orr.w	r2, r3, #2
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800324c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d017      	beq.n	8003288 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003268:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2208      	movs	r2, #8
 8003276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003290:	2b00      	cmp	r3, #0
 8003292:	d012      	beq.n	80032ba <HAL_UART_IRQHandler+0x18a>
 8003294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00c      	beq.n	80032ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 820c 	beq.w	80036de <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d005      	beq.n	8003312 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800330a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04f      	beq.n	80033b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fddd 	bl	8003ed2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003322:	2b40      	cmp	r3, #64	; 0x40
 8003324:	d141      	bne.n	80033aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3308      	adds	r3, #8
 800332c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800333c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3308      	adds	r3, #8
 800334e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800335e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800336a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1d9      	bne.n	8003326 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	2b00      	cmp	r3, #0
 8003378:	d013      	beq.n	80033a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a13      	ldr	r2, [pc, #76]	; (80033cc <HAL_UART_IRQHandler+0x29c>)
 8003380:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd fe76 	bl	8001078 <HAL_DMA_Abort_IT>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d017      	beq.n	80033c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800339c:	4610      	mov	r0, r2
 800339e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	e00f      	b.n	80033c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f9b0 	bl	8003708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	e00b      	b.n	80033c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f9ac 	bl	8003708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e007      	b.n	80033c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f9a8 	bl	8003708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80033c0:	e18d      	b.n	80036de <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c2:	bf00      	nop
    return;
 80033c4:	e18b      	b.n	80036de <HAL_UART_IRQHandler+0x5ae>
 80033c6:	bf00      	nop
 80033c8:	04000120 	.word	0x04000120
 80033cc:	08003f99 	.word	0x08003f99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 8146 	bne.w	8003666 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 813f 	beq.w	8003666 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8138 	beq.w	8003666 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2210      	movs	r2, #16
 80033fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	f040 80b4 	bne.w	8003576 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800341a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 815f 	beq.w	80036e2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800342a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800342e:	429a      	cmp	r2, r3
 8003430:	f080 8157 	bcs.w	80036e2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800343a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 8085 	bne.w	800355a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800346c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800347a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800347e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1da      	bne.n	8003450 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3308      	adds	r3, #8
 80034ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e1      	bne.n	800349a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3308      	adds	r3, #8
 80034f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e3      	bne.n	80034d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352a:	f023 0310 	bic.w	r3, r3, #16
 800352e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800353c:	65bb      	str	r3, [r7, #88]	; 0x58
 800353e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800354a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e4      	bne.n	800351a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fd51 	bl	8000ffc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003566:	b29b      	uxth	r3, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	b29b      	uxth	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd f934 	bl	80007dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003574:	e0b5      	b.n	80036e2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003582:	b29b      	uxth	r3, r3
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80a7 	beq.w	80036e6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a2 	beq.w	80036e6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035c4:	647b      	str	r3, [r7, #68]	; 0x44
 80035c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e4      	bne.n	80035a2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	623b      	str	r3, [r7, #32]
   return(result);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3308      	adds	r3, #8
 80035f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035fc:	633a      	str	r2, [r7, #48]	; 0x30
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e3      	bne.n	80035d8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2220      	movs	r2, #32
 8003614:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	617b      	str	r3, [r7, #20]
   return(result);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e4      	bne.n	8003622 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd f8bc 	bl	80007dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003664:	e03f      	b.n	80036e6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00e      	beq.n	8003690 <HAL_UART_IRQHandler+0x560>
 8003672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003686:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fcc5 	bl	8004018 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800368e:	e02d      	b.n	80036ec <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
    }
    return;
 80036b8:	e017      	b.n	80036ea <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d012      	beq.n	80036ec <HAL_UART_IRQHandler+0x5bc>
 80036c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fc76 	bl	8003fc4 <UART_EndTransmit_IT>
    return;
 80036d8:	e008      	b.n	80036ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80036da:	bf00      	nop
 80036dc:	e006      	b.n	80036ec <HAL_UART_IRQHandler+0x5bc>
    return;
 80036de:	bf00      	nop
 80036e0:	e004      	b.n	80036ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80036e2:	bf00      	nop
 80036e4:	e002      	b.n	80036ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <HAL_UART_IRQHandler+0x5bc>
    return;
 80036ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80036ec:	37e8      	adds	r7, #232	; 0xe8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop

080036f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b08a      	sub	sp, #40	; 0x28
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4313      	orrs	r3, r2
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4bb4      	ldr	r3, [pc, #720]	; (8003a1c <UART_SetConfig+0x300>)
 800374c:	4013      	ands	r3, r2
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003754:	430b      	orrs	r3, r1
 8003756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4aa9      	ldr	r2, [pc, #676]	; (8003a20 <UART_SetConfig+0x304>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	4313      	orrs	r3, r2
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003798:	430a      	orrs	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4aa0      	ldr	r2, [pc, #640]	; (8003a24 <UART_SetConfig+0x308>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d126      	bne.n	80037f4 <UART_SetConfig+0xd8>
 80037a6:	4ba0      	ldr	r3, [pc, #640]	; (8003a28 <UART_SetConfig+0x30c>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d81b      	bhi.n	80037ec <UART_SetConfig+0xd0>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <UART_SetConfig+0xa0>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037dd 	.word	0x080037dd
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e080      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80037d4:	2302      	movs	r3, #2
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e07c      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80037dc:	2304      	movs	r3, #4
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e078      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80037e4:	2308      	movs	r3, #8
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e074      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80037ec:	2310      	movs	r3, #16
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e070      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a8c      	ldr	r2, [pc, #560]	; (8003a2c <UART_SetConfig+0x310>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d138      	bne.n	8003870 <UART_SetConfig+0x154>
 80037fe:	4b8a      	ldr	r3, [pc, #552]	; (8003a28 <UART_SetConfig+0x30c>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d82d      	bhi.n	8003868 <UART_SetConfig+0x14c>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0xf8>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003849 	.word	0x08003849
 8003818:	08003869 	.word	0x08003869
 800381c:	08003869 	.word	0x08003869
 8003820:	08003869 	.word	0x08003869
 8003824:	08003859 	.word	0x08003859
 8003828:	08003869 	.word	0x08003869
 800382c:	08003869 	.word	0x08003869
 8003830:	08003869 	.word	0x08003869
 8003834:	08003851 	.word	0x08003851
 8003838:	08003869 	.word	0x08003869
 800383c:	08003869 	.word	0x08003869
 8003840:	08003869 	.word	0x08003869
 8003844:	08003861 	.word	0x08003861
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e042      	b.n	80038d6 <UART_SetConfig+0x1ba>
 8003850:	2302      	movs	r3, #2
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e03e      	b.n	80038d6 <UART_SetConfig+0x1ba>
 8003858:	2304      	movs	r3, #4
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e03a      	b.n	80038d6 <UART_SetConfig+0x1ba>
 8003860:	2308      	movs	r3, #8
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e036      	b.n	80038d6 <UART_SetConfig+0x1ba>
 8003868:	2310      	movs	r3, #16
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e032      	b.n	80038d6 <UART_SetConfig+0x1ba>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6a      	ldr	r2, [pc, #424]	; (8003a20 <UART_SetConfig+0x304>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d12a      	bne.n	80038d0 <UART_SetConfig+0x1b4>
 800387a:	4b6b      	ldr	r3, [pc, #428]	; (8003a28 <UART_SetConfig+0x30c>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003880:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003884:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003888:	d01a      	beq.n	80038c0 <UART_SetConfig+0x1a4>
 800388a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800388e:	d81b      	bhi.n	80038c8 <UART_SetConfig+0x1ac>
 8003890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003894:	d00c      	beq.n	80038b0 <UART_SetConfig+0x194>
 8003896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389a:	d815      	bhi.n	80038c8 <UART_SetConfig+0x1ac>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <UART_SetConfig+0x18c>
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a4:	d008      	beq.n	80038b8 <UART_SetConfig+0x19c>
 80038a6:	e00f      	b.n	80038c8 <UART_SetConfig+0x1ac>
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e012      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80038b0:	2302      	movs	r3, #2
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b6:	e00e      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80038b8:	2304      	movs	r3, #4
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038be:	e00a      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80038c0:	2308      	movs	r3, #8
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c6:	e006      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80038c8:	2310      	movs	r3, #16
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ce:	e002      	b.n	80038d6 <UART_SetConfig+0x1ba>
 80038d0:	2310      	movs	r3, #16
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a51      	ldr	r2, [pc, #324]	; (8003a20 <UART_SetConfig+0x304>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d17a      	bne.n	80039d6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d824      	bhi.n	8003932 <UART_SetConfig+0x216>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <UART_SetConfig+0x1d4>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003915 	.word	0x08003915
 80038f4:	08003933 	.word	0x08003933
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	08003933 	.word	0x08003933
 8003900:	08003923 	.word	0x08003923
 8003904:	08003933 	.word	0x08003933
 8003908:	08003933 	.word	0x08003933
 800390c:	08003933 	.word	0x08003933
 8003910:	0800392b 	.word	0x0800392b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003914:	f7fe fc42 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 8003918:	61f8      	str	r0, [r7, #28]
        break;
 800391a:	e010      	b.n	800393e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800391c:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <UART_SetConfig+0x314>)
 800391e:	61fb      	str	r3, [r7, #28]
        break;
 8003920:	e00d      	b.n	800393e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003922:	f7fe fba3 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8003926:	61f8      	str	r0, [r7, #28]
        break;
 8003928:	e009      	b.n	800393e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800392e:	61fb      	str	r3, [r7, #28]
        break;
 8003930:	e005      	b.n	800393e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800393c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8107 	beq.w	8003b54 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	429a      	cmp	r2, r3
 8003954:	d305      	bcc.n	8003962 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	429a      	cmp	r2, r3
 8003960:	d903      	bls.n	800396a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003968:	e0f4      	b.n	8003b54 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2200      	movs	r2, #0
 800396e:	461c      	mov	r4, r3
 8003970:	4615      	mov	r5, r2
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	022b      	lsls	r3, r5, #8
 800397c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003980:	0222      	lsls	r2, r4, #8
 8003982:	68f9      	ldr	r1, [r7, #12]
 8003984:	6849      	ldr	r1, [r1, #4]
 8003986:	0849      	lsrs	r1, r1, #1
 8003988:	2000      	movs	r0, #0
 800398a:	4688      	mov	r8, r1
 800398c:	4681      	mov	r9, r0
 800398e:	eb12 0a08 	adds.w	sl, r2, r8
 8003992:	eb43 0b09 	adc.w	fp, r3, r9
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039a4:	4650      	mov	r0, sl
 80039a6:	4659      	mov	r1, fp
 80039a8:	f7fc fc10 	bl	80001cc <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4613      	mov	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ba:	d308      	bcc.n	80039ce <UART_SetConfig+0x2b2>
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c2:	d204      	bcs.n	80039ce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	60da      	str	r2, [r3, #12]
 80039cc:	e0c2      	b.n	8003b54 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039d4:	e0be      	b.n	8003b54 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039de:	d16a      	bne.n	8003ab6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80039e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d834      	bhi.n	8003a52 <UART_SetConfig+0x336>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <UART_SetConfig+0x2d4>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a35 	.word	0x08003a35
 80039f8:	08003a3d 	.word	0x08003a3d
 80039fc:	08003a53 	.word	0x08003a53
 8003a00:	08003a43 	.word	0x08003a43
 8003a04:	08003a53 	.word	0x08003a53
 8003a08:	08003a53 	.word	0x08003a53
 8003a0c:	08003a53 	.word	0x08003a53
 8003a10:	08003a4b 	.word	0x08003a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a14:	f7fe fbc2 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 8003a18:	61f8      	str	r0, [r7, #28]
        break;
 8003a1a:	e020      	b.n	8003a5e <UART_SetConfig+0x342>
 8003a1c:	efff69f3 	.word	0xefff69f3
 8003a20:	40008000 	.word	0x40008000
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40004400 	.word	0x40004400
 8003a30:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a34:	f7fe fbc8 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 8003a38:	61f8      	str	r0, [r7, #28]
        break;
 8003a3a:	e010      	b.n	8003a5e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a3c:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <UART_SetConfig+0x454>)
 8003a3e:	61fb      	str	r3, [r7, #28]
        break;
 8003a40:	e00d      	b.n	8003a5e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a42:	f7fe fb13 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8003a46:	61f8      	str	r0, [r7, #28]
        break;
 8003a48:	e009      	b.n	8003a5e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4e:	61fb      	str	r3, [r7, #28]
        break;
 8003a50:	e005      	b.n	8003a5e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d077      	beq.n	8003b54 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005a      	lsls	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	441a      	add	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b0f      	cmp	r3, #15
 8003a7e:	d916      	bls.n	8003aae <UART_SetConfig+0x392>
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a86:	d212      	bcs.n	8003aae <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f023 030f 	bic.w	r3, r3, #15
 8003a90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	8afb      	ldrh	r3, [r7, #22]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	8afa      	ldrh	r2, [r7, #22]
 8003aaa:	60da      	str	r2, [r3, #12]
 8003aac:	e052      	b.n	8003b54 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ab4:	e04e      	b.n	8003b54 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d827      	bhi.n	8003b0e <UART_SetConfig+0x3f2>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <UART_SetConfig+0x3a8>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003af1 	.word	0x08003af1
 8003acc:	08003af9 	.word	0x08003af9
 8003ad0:	08003b0f 	.word	0x08003b0f
 8003ad4:	08003aff 	.word	0x08003aff
 8003ad8:	08003b0f 	.word	0x08003b0f
 8003adc:	08003b0f 	.word	0x08003b0f
 8003ae0:	08003b0f 	.word	0x08003b0f
 8003ae4:	08003b07 	.word	0x08003b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f7fe fb58 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 8003aec:	61f8      	str	r0, [r7, #28]
        break;
 8003aee:	e014      	b.n	8003b1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af0:	f7fe fb6a 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 8003af4:	61f8      	str	r0, [r7, #28]
        break;
 8003af6:	e010      	b.n	8003b1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <UART_SetConfig+0x454>)
 8003afa:	61fb      	str	r3, [r7, #28]
        break;
 8003afc:	e00d      	b.n	8003b1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003afe:	f7fe fab5 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8003b02:	61f8      	str	r0, [r7, #28]
        break;
 8003b04:	e009      	b.n	8003b1a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b0a:	61fb      	str	r3, [r7, #28]
        break;
 8003b0c:	e005      	b.n	8003b1a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b18:	bf00      	nop
    }

    if (pclk != 0U)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d019      	beq.n	8003b54 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	085a      	lsrs	r2, r3, #1
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	441a      	add	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0f      	cmp	r3, #15
 8003b38:	d909      	bls.n	8003b4e <UART_SetConfig+0x432>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b40:	d205      	bcs.n	8003b4e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60da      	str	r2, [r3, #12]
 8003b4c:	e002      	b.n	8003b54 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3728      	adds	r7, #40	; 0x28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b6e:	bf00      	nop
 8003b70:	00f42400 	.word	0x00f42400

08003b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01a      	beq.n	8003c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c72:	d10a      	bne.n	8003c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	605a      	str	r2, [r3, #4]
  }
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cc8:	f7fc ffc2 	bl	8000c50 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d10e      	bne.n	8003cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f82d 	bl	8003d4a <UART_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e023      	b.n	8003d42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d10e      	bne.n	8003d26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f817 	bl	8003d4a <UART_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e00d      	b.n	8003d42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b09c      	sub	sp, #112	; 0x70
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	603b      	str	r3, [r7, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	e0a5      	b.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	f000 80a1 	beq.w	8003ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fc ff73 	bl	8000c50 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x32>
 8003d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d13e      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d90:	667b      	str	r3, [r7, #100]	; 0x64
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003da0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e6      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dce:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e067      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d04f      	beq.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e16:	d147      	bne.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
 8003e42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e6      	bne.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	613b      	str	r3, [r7, #16]
   return(result);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e74:	623a      	str	r2, [r7, #32]
 8003e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	69f9      	ldr	r1, [r7, #28]
 8003e7a:	6a3a      	ldr	r2, [r7, #32]
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e5      	bne.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e010      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	f43f af4a 	beq.w	8003d5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3770      	adds	r7, #112	; 0x70
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b095      	sub	sp, #84	; 0x54
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8003efa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e6      	bne.n	8003eda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3308      	adds	r3, #8
 8003f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d118      	bne.n	8003f7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0310 	bic.w	r3, r3, #16
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e6      	bne.n	8003f48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f8c:	bf00      	nop
 8003f8e:	3754      	adds	r7, #84	; 0x54
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff fba6 	bl	8003708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	61bb      	str	r3, [r7, #24]
 8003fec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6979      	ldr	r1, [r7, #20]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e6      	bne.n	8003fcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fb72 	bl	80036f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004010:	bf00      	nop
 8004012:	3720      	adds	r7, #32
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	4d0d      	ldr	r5, [pc, #52]	; (8004064 <__libc_init_array+0x38>)
 8004030:	4c0d      	ldr	r4, [pc, #52]	; (8004068 <__libc_init_array+0x3c>)
 8004032:	1b64      	subs	r4, r4, r5
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	2600      	movs	r6, #0
 8004038:	42a6      	cmp	r6, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	4d0b      	ldr	r5, [pc, #44]	; (800406c <__libc_init_array+0x40>)
 800403e:	4c0c      	ldr	r4, [pc, #48]	; (8004070 <__libc_init_array+0x44>)
 8004040:	f000 f820 	bl	8004084 <_init>
 8004044:	1b64      	subs	r4, r4, r5
 8004046:	10a4      	asrs	r4, r4, #2
 8004048:	2600      	movs	r6, #0
 800404a:	42a6      	cmp	r6, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f855 3b04 	ldr.w	r3, [r5], #4
 8004054:	4798      	blx	r3
 8004056:	3601      	adds	r6, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f855 3b04 	ldr.w	r3, [r5], #4
 800405e:	4798      	blx	r3
 8004060:	3601      	adds	r6, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	080040ec 	.word	0x080040ec
 8004068:	080040ec 	.word	0x080040ec
 800406c:	080040ec 	.word	0x080040ec
 8004070:	080040f0 	.word	0x080040f0

08004074 <memset>:
 8004074:	4402      	add	r2, r0
 8004076:	4603      	mov	r3, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	d100      	bne.n	800407e <memset+0xa>
 800407c:	4770      	bx	lr
 800407e:	f803 1b01 	strb.w	r1, [r3], #1
 8004082:	e7f9      	b.n	8004078 <memset+0x4>

08004084 <_init>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr

08004090 <_fini>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	bf00      	nop
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr
