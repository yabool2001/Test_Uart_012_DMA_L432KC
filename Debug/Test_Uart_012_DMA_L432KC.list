
Test_Uart_012_DMA_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000535c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800563c  0800563c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800563c  0800563c  0001563c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005644  08005644  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005648  08005648  00015648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800564c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000080  080056cc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  080056cc  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014eaf  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290b  00000000  00000000  00034f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00037870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  00038a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022472  00000000  00000000  00039bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014945  00000000  00000000  0005c02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d234e  00000000  00000000  0007096f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142cbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005084  00000000  00000000  00142d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054d4 	.word	0x080054d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080054d4 	.word	0x080054d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b598      	push	{r3, r4, r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fcd5 	bl	8000f36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f82c 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f93a 	bl	8000808 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f91a 	bl	80007cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f8e8 	bl	800076c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800059c:	f000 f8ae 	bl	80006fc <MX_TIM6_Init>
  MX_RTC_Init();
 80005a0:	f000 f884 	bl	80006ac <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	send_string_2_dbg ( (char*) hello , strlen ( hello ) ) ;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <main+0x58>)
 80005a6:	681c      	ldr	r4, [r3, #0]
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <main+0x58>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe0f 	bl	80001d0 <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4619      	mov	r1, r3
 80005b6:	4620      	mov	r0, r4
 80005b8:	f000 fa46 	bl	8000a48 <send_string_2_dbg>
	tim_init () ;
 80005bc:	f000 fa58 	bl	8000a70 <tim_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uart_cc ( request, expected_answer ) ;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <main+0x5c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <main+0x60>)
 80005c6:	6812      	ldr	r2, [r2, #0]
 80005c8:	4611      	mov	r1, r2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f966 	bl	800089c <uart_cc>
	  HAL_Delay ( 5000 ) ;
 80005d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80005d4:	f000 fd24 	bl	8001020 <HAL_Delay>
	  uart_cc ( request, expected_answer ) ;
 80005d8:	e7f2      	b.n	80005c0 <main+0x3c>
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000004 	.word	0x20000004
 80005e4:	20000008 	.word	0x20000008

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2244      	movs	r2, #68	; 0x44
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fae2 	bl	8004bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060e:	f001 fa53 	bl	8001ab8 <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000618:	f000 faa4 	bl	8000b64 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f001 fa2e 	bl	8001a7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <SystemClock_Config+0xc0>)
 8000622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <SystemClock_Config+0xc0>)
 8000628:	f023 0318 	bic.w	r3, r3, #24
 800062c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000630:	2314      	movs	r3, #20
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000640:	2360      	movs	r3, #96	; 0x60
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000644:	2302      	movs	r3, #2
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000648:	2301      	movs	r3, #1
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800064c:	2301      	movs	r3, #1
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000650:	2310      	movs	r3, #16
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000654:	2307      	movs	r3, #7
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fa7d 	bl	8001b64 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000670:	f000 fa78 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2303      	movs	r3, #3
 800067a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	2101      	movs	r1, #1
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fe7d 	bl	800238c <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000698:	f000 fa64 	bl	8000b64 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800069c:	f002 fa90 	bl	8002bc0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a0:	bf00      	nop
 80006a2:	3758      	adds	r7, #88	; 0x58
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_RTC_Init+0x48>)
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <MX_RTC_Init+0x4c>)
 80006b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_RTC_Init+0x48>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_RTC_Init+0x48>)
 80006be:	227f      	movs	r2, #127	; 0x7f
 80006c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_RTC_Init+0x48>)
 80006c4:	22ff      	movs	r2, #255	; 0xff
 80006c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_RTC_Init+0x48>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_RTC_Init+0x48>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_RTC_Init+0x48>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_RTC_Init+0x48>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_RTC_Init+0x48>)
 80006e2:	f002 fb6f 	bl	8002dc4 <HAL_RTC_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80006ec:	f000 fa3a 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000009c 	.word	0x2000009c
 80006f8:	40002800 	.word	0x40002800

080006fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_TIM6_Init+0x68>)
 800070e:	4a16      	ldr	r2, [pc, #88]	; (8000768 <MX_TIM6_Init+0x6c>)
 8000710:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_TIM6_Init+0x68>)
 8000714:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000718:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_TIM6_Init+0x68>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_TIM6_Init+0x68>)
 8000722:	f241 3287 	movw	r2, #4999	; 0x1387
 8000726:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_TIM6_Init+0x68>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_TIM6_Init+0x68>)
 8000730:	f002 fc8a 	bl	8003048 <HAL_TIM_Base_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800073a:	f000 fa13 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <MX_TIM6_Init+0x68>)
 800074c:	f002 ff02 	bl	8003554 <HAL_TIMEx_MasterConfigSynchronization>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000756:	f000 fa05 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000c0 	.word	0x200000c0
 8000768:	40001000 	.word	0x40001000

0800076c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_USART2_UART_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007b0:	f002 ff54 	bl	800365c <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f9d3 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000010c 	.word	0x2000010c
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_DMA_Init+0x38>)
 80007d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007d6:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <MX_DMA_Init+0x38>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6493      	str	r3, [r2, #72]	; 0x48
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_DMA_Init+0x38>)
 80007e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2010      	movs	r0, #16
 80007f0:	f000 fd15 	bl	800121e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007f4:	2010      	movs	r0, #16
 80007f6:	f000 fd2e 	bl	8001256 <HAL_NVIC_EnableIRQ>

}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_GPIO_Init+0x8c>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <MX_GPIO_Init+0x8c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_GPIO_Init+0x8c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0x90>)
 800086c:	f001 f8ee 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 8000870:	2308      	movs	r3, #8
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0x90>)
 8000888:	f000 ff76 	bl	8001778 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400

0800089c <uart_cc>:

/* USER CODE BEGIN 4 */

uint8_t uart_cc ( const char* req , const char* ans )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	uint8_t try ;
	int ldbg ;

	int lm = sprintf ( tx_buff , "%s\n" , req ) ;
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	4944      	ldr	r1, [pc, #272]	; (80009bc <uart_cc+0x120>)
 80008aa:	4845      	ldr	r0, [pc, #276]	; (80009c0 <uart_cc+0x124>)
 80008ac:	f004 f990 	bl	8004bd0 <siprintf>
 80008b0:	6138      	str	r0, [r7, #16]

	for ( try = 0 ; try < 5 ; try++ )
 80008b2:	2300      	movs	r3, #0
 80008b4:	75fb      	strb	r3, [r7, #23]
 80008b6:	e06a      	b.n	800098e <uart_cc+0xf2>
	{
		tim_start () ;
 80008b8:	f000 f8e8 	bl	8000a8c <tim_start>
		if ( answer_from_pc == 0 )
 80008bc:	4b41      	ldr	r3, [pc, #260]	; (80009c4 <uart_cc+0x128>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d113      	bne.n	80008ec <uart_cc+0x50>
			if ( receive_uart_dma () != HAL_OK )
 80008c4:	f000 f90a 	bl	8000adc <receive_uart_dma>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00e      	beq.n	80008ec <uart_cc+0x50>
			{
				ldbg = sprintf ( dbg_buff , "%stry no. %u != HAL_OK for %s\n" , dbg , try , req ) ;
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <uart_cc+0x12c>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	7df9      	ldrb	r1, [r7, #23]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	460b      	mov	r3, r1
 80008da:	493c      	ldr	r1, [pc, #240]	; (80009cc <uart_cc+0x130>)
 80008dc:	483c      	ldr	r0, [pc, #240]	; (80009d0 <uart_cc+0x134>)
 80008de:	f004 f977 	bl	8004bd0 <siprintf>
 80008e2:	60f8      	str	r0, [r7, #12]
				send_string_2_dbg ( dbg_buff , ldbg ) ;
 80008e4:	68f9      	ldr	r1, [r7, #12]
 80008e6:	483a      	ldr	r0, [pc, #232]	; (80009d0 <uart_cc+0x134>)
 80008e8:	f000 f8ae 	bl	8000a48 <send_string_2_dbg>
			}
		send_string_2_uart ( tx_buff , lm ) ;
 80008ec:	6939      	ldr	r1, [r7, #16]
 80008ee:	4834      	ldr	r0, [pc, #208]	; (80009c0 <uart_cc+0x124>)
 80008f0:	f000 f896 	bl	8000a20 <send_string_2_uart>
		while ( tim_on )
 80008f4:	e041      	b.n	800097a <uart_cc+0xde>
			if ( answer_from_pc == 2 )
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <uart_cc+0x128>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d13d      	bne.n	800097a <uart_cc+0xde>
			{
				answer_from_pc = 0 ;
 80008fe:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <uart_cc+0x128>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
				ldbg = sprintf ( dbg_buff , "\n%stry no. %u answer_from_pc = 1 for %s\n" , dbg , try , req ) ;
 8000904:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <uart_cc+0x12c>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	7df9      	ldrb	r1, [r7, #23]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	460b      	mov	r3, r1
 8000910:	4930      	ldr	r1, [pc, #192]	; (80009d4 <uart_cc+0x138>)
 8000912:	482f      	ldr	r0, [pc, #188]	; (80009d0 <uart_cc+0x134>)
 8000914:	f004 f95c 	bl	8004bd0 <siprintf>
 8000918:	60f8      	str	r0, [r7, #12]
				send_string_2_dbg ( dbg_buff , ldbg ) ;
 800091a:	68f9      	ldr	r1, [r7, #12]
 800091c:	482c      	ldr	r0, [pc, #176]	; (80009d0 <uart_cc+0x134>)
 800091e:	f000 f893 	bl	8000a48 <send_string_2_dbg>
				if ( strncmp ( rx_buff , ans , strlen ( ans ) ) == 0 )
 8000922:	6838      	ldr	r0, [r7, #0]
 8000924:	f7ff fc54 	bl	80001d0 <strlen>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	6839      	ldr	r1, [r7, #0]
 800092e:	482a      	ldr	r0, [pc, #168]	; (80009d8 <uart_cc+0x13c>)
 8000930:	f004 f96e 	bl	8004c10 <strncmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d11b      	bne.n	8000972 <uart_cc+0xd6>
				{
					send_string_2_uart ( rx_buff , strlen ( rx_buff ) ) ;
 800093a:	4827      	ldr	r0, [pc, #156]	; (80009d8 <uart_cc+0x13c>)
 800093c:	f7ff fc48 	bl	80001d0 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	4619      	mov	r1, r3
 8000944:	4824      	ldr	r0, [pc, #144]	; (80009d8 <uart_cc+0x13c>)
 8000946:	f000 f86b 	bl	8000a20 <send_string_2_uart>
					ldbg = sprintf ( dbg_buff , "%stry no. %u success for %s\n" , dbg , try , req ) ;
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <uart_cc+0x12c>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	7df9      	ldrb	r1, [r7, #23]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	460b      	mov	r3, r1
 8000956:	4921      	ldr	r1, [pc, #132]	; (80009dc <uart_cc+0x140>)
 8000958:	481d      	ldr	r0, [pc, #116]	; (80009d0 <uart_cc+0x134>)
 800095a:	f004 f939 	bl	8004bd0 <siprintf>
 800095e:	60f8      	str	r0, [r7, #12]
					send_string_2_dbg ( dbg_buff , ldbg ) ;
 8000960:	68f9      	ldr	r1, [r7, #12]
 8000962:	481b      	ldr	r0, [pc, #108]	; (80009d0 <uart_cc+0x134>)
 8000964:	f000 f870 	bl	8000a48 <send_string_2_dbg>
					rx_buff[0] = '\0' ;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <uart_cc+0x13c>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
					return 1 ;
 800096e:	2301      	movs	r3, #1
 8000970:	e01f      	b.n	80009b2 <uart_cc+0x116>
				}
				else
				{
					rx_buff[0] = '\0' ;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <uart_cc+0x13c>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
					break ;
 8000978:	e003      	b.n	8000982 <uart_cc+0xe6>
		while ( tim_on )
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <uart_cc+0x144>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1b9      	bne.n	80008f6 <uart_cc+0x5a>
				}
			}
		clean_buff ( rx_buff ) ;
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <uart_cc+0x13c>)
 8000984:	f000 f832 	bl	80009ec <clean_buff>
	for ( try = 0 ; try < 5 ; try++ )
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	3301      	adds	r3, #1
 800098c:	75fb      	strb	r3, [r7, #23]
 800098e:	7dfb      	ldrb	r3, [r7, #23]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d991      	bls.n	80008b8 <uart_cc+0x1c>
	}

	ldbg = sprintf ( dbg_buff , "%s%s %s\n", dbg , (char*) ans , "not received.\n" ) ;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <uart_cc+0x12c>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <uart_cc+0x148>)
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	4912      	ldr	r1, [pc, #72]	; (80009e8 <uart_cc+0x14c>)
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <uart_cc+0x134>)
 80009a2:	f004 f915 	bl	8004bd0 <siprintf>
 80009a6:	60f8      	str	r0, [r7, #12]
	send_string_2_dbg ( dbg_buff , ldbg ) ;
 80009a8:	68f9      	ldr	r1, [r7, #12]
 80009aa:	4809      	ldr	r0, [pc, #36]	; (80009d0 <uart_cc+0x134>)
 80009ac:	f000 f84c 	bl	8000a48 <send_string_2_dbg>
	return 0 ;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08005534 	.word	0x08005534
 80009c0:	2000023c 	.word	0x2000023c
 80009c4:	20000305 	.word	0x20000305
 80009c8:	2000000c 	.word	0x2000000c
 80009cc:	08005538 	.word	0x08005538
 80009d0:	200002a0 	.word	0x200002a0
 80009d4:	08005558 	.word	0x08005558
 80009d8:	200001d8 	.word	0x200001d8
 80009dc:	08005584 	.word	0x08005584
 80009e0:	20000304 	.word	0x20000304
 80009e4:	080055b0 	.word	0x080055b0
 80009e8:	080055a4 	.word	0x080055a4

080009ec <clean_buff>:
	send_string_2_dbg ( dbg_buff , ldbg ) ;
	return 0 ;
}
*/
void clean_buff ( char* buff )
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	uint8_t i ;
	for ( i = 0 ; i < MAX_BUFF_SIZE ; i++ )
 80009f4:	2300      	movs	r3, #0
 80009f6:	73fb      	strb	r3, [r7, #15]
 80009f8:	e007      	b.n	8000a0a <clean_buff+0x1e>
		buff[i] = '\0' ;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	for ( i = 0 ; i < MAX_BUFF_SIZE ; i++ )
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	3301      	adds	r3, #1
 8000a08:	73fb      	strb	r3, [r7, #15]
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	2b63      	cmp	r3, #99	; 0x63
 8000a0e:	d9f4      	bls.n	80009fa <clean_buff+0xe>
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <send_string_2_uart>:
{
	HAL_GPIO_TogglePin ( GREEN_GPIO_Port , GREEN_Pin ) ;
}

HAL_StatusTypeDef send_string_2_uart ( char* s , int l )
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit ( UART_HANDLER , (uint8_t *) s , l , UART_TX_TIMEOUT ) ;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <send_string_2_uart+0x24>)
 8000a34:	f002 fe60 	bl	80036f8 <HAL_UART_Transmit>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000010c 	.word	0x2000010c

08000a48 <send_string_2_dbg>:
HAL_StatusTypeDef send_string_2_dbg ( char* s , int l )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit ( UART_HANDLER , (uint8_t *) s , l , UART_TX_TIMEOUT ) ;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <send_string_2_dbg+0x24>)
 8000a5c:	f002 fe4c 	bl	80036f8 <HAL_UART_Transmit>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000010c 	.word	0x2000010c

08000a70 <tim_init>:


void tim_init ()
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM_HANDLER , TIM_IT_UPDATE ) ;
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <tim_init+0x18>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f06f 0201 	mvn.w	r2, #1
 8000a7c:	611a      	str	r2, [r3, #16]
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	200000c0 	.word	0x200000c0

08000a8c <tim_start>:
void tim_start ()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT ( &TIM_HANDLER ) ;
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <tim_start+0x14>)
 8000a92:	f002 fb31 	bl	80030f8 <HAL_TIM_Base_Start_IT>
	tim_on = 1 ;
 8000a96:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <tim_start+0x18>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000c0 	.word	0x200000c0
 8000aa4:	20000304 	.word	0x20000304

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM_INSTANCE )
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d105      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_TIM_Base_Stop_IT ( &TIM_HANDLER ) ;
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000abc:	f002 fb70 	bl	80031a0 <HAL_TIM_Base_Stop_IT>
		tim_on = 0 ;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40001000 	.word	0x40001000
 8000ad4:	200000c0 	.word	0x200000c0
 8000ad8:	20000304 	.word	0x20000304

08000adc <receive_uart_dma>:

HAL_StatusTypeDef receive_uart_dma ()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef r = HAL_UARTEx_ReceiveToIdle_DMA ( UART_HANDLER , (uint8_t*) rx_buff , MAX_BUFF_SIZE ) ;
 8000ae2:	2264      	movs	r2, #100	; 0x64
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <receive_uart_dma+0x3c>)
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <receive_uart_dma+0x40>)
 8000ae8:	f003 ffe5 	bl	8004ab6 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
	if ( r == HAL_OK )
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10a      	bne.n	8000b0c <receive_uart_dma+0x30>
	{
		answer_from_pc = 1 ;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <receive_uart_dma+0x44>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
		__HAL_DMA_DISABLE_IT ( &hdma_usart2_rx, DMA_IT_HT ) ; //Disable Half Transfer interrupt.
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <receive_uart_dma+0x48>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <receive_uart_dma+0x48>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 0204 	bic.w	r2, r2, #4
 8000b0a:	601a      	str	r2, [r3, #0]
	}
	return r ;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200001d8 	.word	0x200001d8
 8000b1c:	2000010c 	.word	0x2000010c
 8000b20:	20000305 	.word	0x20000305
 8000b24:	20000190 	.word	0x20000190

08000b28 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback ( UART_HandleTypeDef *huart , uint16_t Size )
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
    if ( huart->Instance == UART_INSTANCE )
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_UARTEx_RxEventCallback+0x30>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d106      	bne.n	8000b4c <HAL_UARTEx_RxEventCallback+0x24>
    {
    	answer_from_pc = 2 ;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_UARTEx_RxEventCallback+0x34>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	701a      	strb	r2, [r3, #0]
    	rx_buff[Size] = '\0' ;
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_UARTEx_RxEventCallback+0x38>)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	54d1      	strb	r1, [r2, r3]
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	20000305 	.word	0x20000305
 8000b60:	200001d8 	.word	0x200001d8

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6613      	str	r3, [r2, #96]	; 0x60
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b098      	sub	sp, #96	; 0x60
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	2254      	movs	r2, #84	; 0x54
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fff9 	bl	8004bc0 <memset>
  if(hrtc->Instance==RTC)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <HAL_RTC_MspInit+0x68>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d11f      	bne.n	8000c18 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bdc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fdf3 	bl	80027d4 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000bf4:	f7ff ffb6 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_RTC_MspInit+0x6c>)
 8000bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bfe:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <HAL_RTC_MspInit+0x6c>)
 8000c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 fb06 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000c12:	2003      	movs	r0, #3
 8000c14:	f000 fb1f 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3760      	adds	r7, #96	; 0x60
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40002800 	.word	0x40002800
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <HAL_TIM_Base_MspInit+0x44>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d113      	bne.n	8000c62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_TIM_Base_MspInit+0x48>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <HAL_TIM_Base_MspInit+0x48>)
 8000c40:	f043 0310 	orr.w	r3, r3, #16
 8000c44:	6593      	str	r3, [r2, #88]	; 0x58
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_TIM_Base_MspInit+0x48>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2036      	movs	r0, #54	; 0x36
 8000c58:	f000 fae1 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c5c:	2036      	movs	r0, #54	; 0x36
 8000c5e:	f000 fafa 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40001000 	.word	0x40001000
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b09e      	sub	sp, #120	; 0x78
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	2254      	movs	r2, #84	; 0x54
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 ff93 	bl	8004bc0 <memset>
  if(huart->Instance==USART2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <HAL_UART_MspInit+0x12c>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d179      	bne.n	8000d98 <HAL_UART_MspInit+0x124>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fd8f 	bl	80027d4 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cbc:	f7ff ff52 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <HAL_UART_MspInit+0x130>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc4:	4a37      	ldr	r2, [pc, #220]	; (8000da4 <HAL_UART_MspInit+0x130>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6593      	str	r3, [r2, #88]	; 0x58
 8000ccc:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <HAL_UART_MspInit+0x130>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <HAL_UART_MspInit+0x130>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	4a31      	ldr	r2, [pc, #196]	; (8000da4 <HAL_UART_MspInit+0x130>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <HAL_UART_MspInit+0x130>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d00:	2307      	movs	r3, #7
 8000d02:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 fd33 	bl	8001778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d24:	2303      	movs	r3, #3
 8000d26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f000 fd21 	bl	8001778 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d38:	4a1c      	ldr	r2, [pc, #112]	; (8000dac <HAL_UART_MspInit+0x138>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d3e:	2202      	movs	r2, #2
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d6c:	480e      	ldr	r0, [pc, #56]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d6e:	f000 fa8d 	bl	800128c <HAL_DMA_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000d78:	f7ff fef4 	bl	8000b64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d80:	671a      	str	r2, [r3, #112]	; 0x70
 8000d82:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <HAL_UART_MspInit+0x134>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2026      	movs	r0, #38	; 0x26
 8000d8e:	f000 fa46 	bl	800121e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d92:	2026      	movs	r0, #38	; 0x26
 8000d94:	f000 fa5f 	bl	8001256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3778      	adds	r7, #120	; 0x78
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40021000 	.word	0x40021000
 8000da8:	20000190 	.word	0x20000190
 8000dac:	4002006c 	.word	0x4002006c

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f8f0 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <RTC_WKUP_IRQHandler+0x10>)
 8000e0a:	f002 f8ed 	bl	8002fe8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000009c 	.word	0x2000009c

08000e18 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA1_Channel6_IRQHandler+0x10>)
 8000e1e:	f000 fbcc 	bl	80015ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000190 	.word	0x20000190

08000e2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <USART2_IRQHandler+0x10>)
 8000e32:	f002 fcf5 	bl	8003820 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000010c 	.word	0x2000010c

08000e40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM6_DAC_IRQHandler+0x10>)
 8000e46:	f002 f9da 	bl	80031fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000c0 	.word	0x200000c0

08000e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <_sbrk+0x5c>)
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <_sbrk+0x60>)
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d102      	bne.n	8000e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <_sbrk+0x64>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <_sbrk+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d207      	bcs.n	8000e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e84:	f003 fe72 	bl	8004b6c <__errno>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	e009      	b.n	8000ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <_sbrk+0x64>)
 8000ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20010000 	.word	0x20010000
 8000eb4:	00000400 	.word	0x00000400
 8000eb8:	20000308 	.word	0x20000308
 8000ebc:	20000320 	.word	0x20000320

08000ec0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <SystemInit+0x20>)
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <SystemInit+0x20>)
 8000ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee8:	f7ff ffea 	bl	8000ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eee:	490d      	ldr	r1, [pc, #52]	; (8000f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <LoopForever+0xe>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f04:	4c0a      	ldr	r4, [pc, #40]	; (8000f30 <LoopForever+0x16>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f12:	f003 fe31 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f16:	f7ff fb35 	bl	8000584 <main>

08000f1a <LoopForever>:

LoopForever:
    b LoopForever
 8000f1a:	e7fe      	b.n	8000f1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f24:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f28:	0800564c 	.word	0x0800564c
  ldr r2, =_sbss
 8000f2c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f30:	20000320 	.word	0x20000320

08000f34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC1_IRQHandler>

08000f36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f961 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f80e 	bl	8000f68 <HAL_InitTick>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	e001      	b.n	8000f5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f58:	f7ff fe0a 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_InitTick+0x6c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d023      	beq.n	8000fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_InitTick+0x70>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_InitTick+0x6c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f96d 	bl	8001272 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d809      	bhi.n	8000fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f937 	bl	800121e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_InitTick+0x74>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e004      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e001      	b.n	8000fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000018 	.word	0x20000018
 8000fd8:	20000010 	.word	0x20000010
 8000fdc:	20000014 	.word	0x20000014

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000018 	.word	0x20000018
 8001004:	2000030c 	.word	0x2000030c

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000030c 	.word	0x2000030c

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000018 	.word	0x20000018

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff3e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff31 	bl	80010cc <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e098      	b.n	80013d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <HAL_DMA_Init+0x150>)
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d80f      	bhi.n	80012ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_DMA_Init+0x154>)
 80012b2:	4413      	add	r3, r2
 80012b4:	4a4b      	ldr	r2, [pc, #300]	; (80013e4 <HAL_DMA_Init+0x158>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	009a      	lsls	r2, r3, #2
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <HAL_DMA_Init+0x15c>)
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
 80012c8:	e00e      	b.n	80012e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_DMA_Init+0x160>)
 80012d2:	4413      	add	r3, r2
 80012d4:	4a43      	ldr	r2, [pc, #268]	; (80013e4 <HAL_DMA_Init+0x158>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	009a      	lsls	r2, r3, #2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a42      	ldr	r2, [pc, #264]	; (80013f0 <HAL_DMA_Init+0x164>)
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2202      	movs	r2, #2
 80012ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001302:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800130c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001342:	d039      	beq.n	80013b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <HAL_DMA_Init+0x15c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d11a      	bne.n	8001384 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <HAL_DMA_Init+0x168>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f003 031c 	and.w	r3, r3, #28
 800135a:	210f      	movs	r1, #15
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	4924      	ldr	r1, [pc, #144]	; (80013f4 <HAL_DMA_Init+0x168>)
 8001364:	4013      	ands	r3, r2
 8001366:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <HAL_DMA_Init+0x168>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6859      	ldr	r1, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f003 031c 	and.w	r3, r3, #28
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	491d      	ldr	r1, [pc, #116]	; (80013f4 <HAL_DMA_Init+0x168>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
 8001382:	e019      	b.n	80013b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_DMA_Init+0x16c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f003 031c 	and.w	r3, r3, #28
 8001390:	210f      	movs	r1, #15
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	4917      	ldr	r1, [pc, #92]	; (80013f8 <HAL_DMA_Init+0x16c>)
 800139a:	4013      	ands	r3, r2
 800139c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_DMA_Init+0x16c>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6859      	ldr	r1, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f003 031c 	and.w	r3, r3, #28
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	4911      	ldr	r1, [pc, #68]	; (80013f8 <HAL_DMA_Init+0x16c>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40020407 	.word	0x40020407
 80013e0:	bffdfff8 	.word	0xbffdfff8
 80013e4:	cccccccd 	.word	0xcccccccd
 80013e8:	40020000 	.word	0x40020000
 80013ec:	bffdfbf8 	.word	0xbffdfbf8
 80013f0:	40020400 	.word	0x40020400
 80013f4:	400200a8 	.word	0x400200a8
 80013f8:	400204a8 	.word	0x400204a8

080013fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_DMA_Start_IT+0x20>
 8001418:	2302      	movs	r3, #2
 800141a:	e04b      	b.n	80014b4 <HAL_DMA_Start_IT+0xb8>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d13a      	bne.n	80014a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0201 	bic.w	r2, r2, #1
 800144c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 f95f 	bl	8001718 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 020e 	orr.w	r2, r2, #14
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e00f      	b.n	8001494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0204 	bic.w	r2, r2, #4
 8001482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 020a 	orr.w	r2, r2, #10
 8001492:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e005      	b.n	80014b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014ae:	2302      	movs	r3, #2
 80014b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d008      	beq.n	80014e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2204      	movs	r2, #4
 80014d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e022      	b.n	800152c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 020e 	bic.w	r2, r2, #14
 80014f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f003 021c 	and.w	r2, r3, #28
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f202 	lsl.w	r2, r1, r2
 8001518:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d005      	beq.n	800155c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2204      	movs	r2, #4
 8001554:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e029      	b.n	80015b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020e 	bic.w	r2, r2, #14
 800156a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	f003 021c 	and.w	r2, r3, #28
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f202 	lsl.w	r2, r1, r2
 800158e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
    }
  }
  return status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f003 031c 	and.w	r3, r3, #28
 80015da:	2204      	movs	r2, #4
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d026      	beq.n	8001634 <HAL_DMA_IRQHandler+0x7a>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d021      	beq.n	8001634 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d107      	bne.n	800160e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0204 	bic.w	r2, r2, #4
 800160c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f003 021c 	and.w	r2, r3, #28
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	2104      	movs	r1, #4
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	2b00      	cmp	r3, #0
 8001628:	d071      	beq.n	800170e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001632:	e06c      	b.n	800170e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	f003 031c 	and.w	r3, r3, #28
 800163c:	2202      	movs	r2, #2
 800163e:	409a      	lsls	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d02e      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xec>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d029      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10b      	bne.n	8001678 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 020a 	bic.w	r2, r2, #10
 800166e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f003 021c 	and.w	r2, r3, #28
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	2102      	movs	r1, #2
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d038      	beq.n	800170e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016a4:	e033      	b.n	800170e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 031c 	and.w	r3, r3, #28
 80016ae:	2208      	movs	r2, #8
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d02a      	beq.n	8001710 <HAL_DMA_IRQHandler+0x156>
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d025      	beq.n	8001710 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 020e 	bic.w	r2, r2, #14
 80016d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	f003 021c 	and.w	r2, r3, #28
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	2101      	movs	r1, #1
 80016e2:	fa01 f202 	lsl.w	r2, r1, r2
 80016e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800170e:	bf00      	nop
 8001710:	bf00      	nop
}
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f003 021c 	and.w	r2, r3, #28
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b10      	cmp	r3, #16
 8001748:	d108      	bne.n	800175c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800175a:	e007      	b.n	800176c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	60da      	str	r2, [r3, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e148      	b.n	8001a1a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 813a 	beq.w	8001a14 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d005      	beq.n	80017b8 <HAL_GPIO_Init+0x40>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d130      	bne.n	800181a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ee:	2201      	movs	r2, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	f003 0201 	and.w	r2, r3, #1
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b03      	cmp	r3, #3
 8001824:	d017      	beq.n	8001856 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d123      	bne.n	80018aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	6939      	ldr	r1, [r7, #16]
 80018a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0203 	and.w	r2, r3, #3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8094 	beq.w	8001a14 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ec:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80018ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f0:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6613      	str	r3, [r2, #96]	; 0x60
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80018fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001904:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <HAL_GPIO_Init+0x2c4>)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800192e:	d00d      	beq.n	800194c <HAL_GPIO_Init+0x1d4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <HAL_GPIO_Init+0x2c8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d007      	beq.n	8001948 <HAL_GPIO_Init+0x1d0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <HAL_GPIO_Init+0x2cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_GPIO_Init+0x1cc>
 8001940:	2302      	movs	r3, #2
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1d6>
 8001944:	2307      	movs	r3, #7
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1d6>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1d6>
 800194c:	2300      	movs	r3, #0
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800195e:	4937      	ldr	r1, [pc, #220]	; (8001a3c <HAL_GPIO_Init+0x2c4>)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001990:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f aeaf 	bne.w	8001788 <HAL_GPIO_Init+0x10>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000

08001a9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac6:	d130      	bne.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad4:	d038      	beq.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2232      	movs	r2, #50	; 0x32
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9b      	lsrs	r3, r3, #18
 8001af8:	3301      	adds	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afc:	e002      	b.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b10:	d102      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f2      	bne.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b24:	d110      	bne.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e00f      	b.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b36:	d007      	beq.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	20000010 	.word	0x20000010
 8001b60:	431bde83 	.word	0x431bde83

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f000 bc02 	b.w	800237c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b78:	4b96      	ldr	r3, [pc, #600]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b82:	4b94      	ldr	r3, [pc, #592]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80e4 	beq.w	8001d62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4c>
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	f040 808b 	bne.w	8001cbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	f040 8087 	bne.w	8001cbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb0:	4b88      	ldr	r3, [pc, #544]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x64>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e3d9      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1a      	ldr	r2, [r3, #32]
 8001bcc:	4b81      	ldr	r3, [pc, #516]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_RCC_OscConfig+0x7e>
 8001bd8:	4b7e      	ldr	r3, [pc, #504]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be0:	e005      	b.n	8001bee <HAL_RCC_OscConfig+0x8a>
 8001be2:	4b7c      	ldr	r3, [pc, #496]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d223      	bcs.n	8001c3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 fd8c 	bl	8002714 <RCC_SetFlashLatencyFromMSIRange>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e3ba      	b.n	800237c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c06:	4b73      	ldr	r3, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a72      	ldr	r2, [pc, #456]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	496d      	ldr	r1, [pc, #436]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c24:	4b6b      	ldr	r3, [pc, #428]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	4968      	ldr	r1, [pc, #416]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e025      	b.n	8001c86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c3a:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a65      	ldr	r2, [pc, #404]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b63      	ldr	r3, [pc, #396]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4960      	ldr	r1, [pc, #384]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c58:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	495b      	ldr	r1, [pc, #364]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fd4c 	bl	8002714 <RCC_SetFlashLatencyFromMSIRange>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e37a      	b.n	800237c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c86:	f000 fc81 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	4950      	ldr	r1, [pc, #320]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001c98:	5ccb      	ldrb	r3, [r1, r3]
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a4e      	ldr	r2, [pc, #312]	; (8001ddc <HAL_RCC_OscConfig+0x278>)
 8001ca4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ca6:	4b4e      	ldr	r3, [pc, #312]	; (8001de0 <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f95c 	bl	8000f68 <HAL_InitTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d052      	beq.n	8001d60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	e35e      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d032      	beq.n	8001d2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cc6:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a42      	ldr	r2, [pc, #264]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f999 	bl	8001008 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cda:	f7ff f995 	bl	8001008 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e347      	b.n	800237c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cec:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a35      	ldr	r2, [pc, #212]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	f043 0308 	orr.w	r3, r3, #8
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4930      	ldr	r1, [pc, #192]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	492b      	ldr	r1, [pc, #172]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
 8001d2a:	e01a      	b.n	8001d62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d2c:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d38:	f7ff f966 	bl	8001008 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d40:	f7ff f962 	bl	8001008 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e314      	b.n	800237c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1dc>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d073      	beq.n	8001e56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_OscConfig+0x21c>
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d10e      	bne.n	8001d98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d10b      	bne.n	8001d98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d063      	beq.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d15f      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e2f1      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d106      	bne.n	8001db0 <HAL_RCC_OscConfig+0x24c>
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e025      	b.n	8001dfc <HAL_RCC_OscConfig+0x298>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d114      	bne.n	8001de4 <HAL_RCC_OscConfig+0x280>
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a02      	ldr	r2, [pc, #8]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e013      	b.n	8001dfc <HAL_RCC_OscConfig+0x298>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	080055c0 	.word	0x080055c0
 8001ddc:	20000010 	.word	0x20000010
 8001de0:	20000014 	.word	0x20000014
 8001de4:	4ba0      	ldr	r3, [pc, #640]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a9f      	ldr	r2, [pc, #636]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b9d      	ldr	r3, [pc, #628]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a9c      	ldr	r2, [pc, #624]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff f900 	bl	8001008 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f8fc 	bl	8001008 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e2ae      	b.n	800237c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1e:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2a8>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f8ec 	bl	8001008 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff f8e8 	bl	8001008 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e29a      	b.n	800237c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2d0>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d060      	beq.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_OscConfig+0x310>
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d119      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d116      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e74:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_OscConfig+0x328>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e277      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	4973      	ldr	r1, [pc, #460]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea0:	e040      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d023      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f8a7 	bl	8001008 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f8a3 	bl	8001008 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e255      	b.n	800237c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed0:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001edc:	4b62      	ldr	r3, [pc, #392]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	061b      	lsls	r3, r3, #24
 8001eea:	495f      	ldr	r1, [pc, #380]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
 8001ef0:	e018      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a5c      	ldr	r2, [pc, #368]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f883 	bl	8001008 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff f87f 	bl	8001008 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e231      	b.n	800237c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d03c      	beq.n	8001faa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3e:	4a4a      	ldr	r2, [pc, #296]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff f85e 	bl	8001008 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff f85a 	bl	8001008 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e20c      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ef      	beq.n	8001f50 <HAL_RCC_OscConfig+0x3ec>
 8001f70:	e01b      	b.n	8001faa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff f841 	bl	8001008 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f83d 	bl	8001008 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1ef      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ef      	bne.n	8001f8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80a6 	beq.w	8002104 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe4:	4b21      	ldr	r3, [pc, #132]	; (800206c <HAL_RCC_OscConfig+0x508>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d118      	bne.n	8002022 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_RCC_OscConfig+0x508>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_RCC_OscConfig+0x508>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f804 	bl	8001008 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7ff f800 	bl	8001008 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1b2      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_RCC_OscConfig+0x508>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d108      	bne.n	800203c <HAL_RCC_OscConfig+0x4d8>
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800203a:	e029      	b.n	8002090 <HAL_RCC_OscConfig+0x52c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d115      	bne.n	8002070 <HAL_RCC_OscConfig+0x50c>
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a03      	ldr	r2, [pc, #12]	; (8002068 <HAL_RCC_OscConfig+0x504>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x52c>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	4b9a      	ldr	r3, [pc, #616]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	4a99      	ldr	r2, [pc, #612]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002080:	4b96      	ldr	r3, [pc, #600]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a95      	ldr	r2, [pc, #596]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002088:	f023 0304 	bic.w	r3, r3, #4
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d016      	beq.n	80020c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7fe ffb6 	bl	8001008 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7fe ffb2 	bl	8001008 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e162      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ed      	beq.n	80020a0 <HAL_RCC_OscConfig+0x53c>
 80020c4:	e015      	b.n	80020f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c6:	f7fe ff9f 	bl	8001008 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7fe ff9b 	bl	8001008 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e14b      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e4:	4b7d      	ldr	r3, [pc, #500]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1ed      	bne.n	80020ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f2:	7ffb      	ldrb	r3, [r7, #31]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f8:	4b78      	ldr	r3, [pc, #480]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a77      	ldr	r2, [pc, #476]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 80020fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d03c      	beq.n	800218a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01c      	beq.n	8002152 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002118:	4b70      	ldr	r3, [pc, #448]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 800211a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800211e:	4a6f      	ldr	r2, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe ff6e 	bl	8001008 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002130:	f7fe ff6a 	bl	8001008 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e11c      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002142:	4b66      	ldr	r3, [pc, #408]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ef      	beq.n	8002130 <HAL_RCC_OscConfig+0x5cc>
 8002150:	e01b      	b.n	800218a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002152:	4b62      	ldr	r3, [pc, #392]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002158:	4a60      	ldr	r2, [pc, #384]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002162:	f7fe ff51 	bl	8001008 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800216a:	f7fe ff4d 	bl	8001008 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0ff      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800217c:	4b57      	ldr	r3, [pc, #348]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 800217e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1ef      	bne.n	800216a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80f3 	beq.w	800237a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b02      	cmp	r3, #2
 800219a:	f040 80c9 	bne.w	8002330 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800219e:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0203 	and.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d12c      	bne.n	800220c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	3b01      	subs	r3, #1
 80021be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d123      	bne.n	800220c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d11b      	bne.n	800220c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d113      	bne.n	800220c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	3b01      	subs	r3, #1
 80021f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d109      	bne.n	800220c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	085b      	lsrs	r3, r3, #1
 8002204:	3b01      	subs	r3, #1
 8002206:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d06b      	beq.n	80022e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d062      	beq.n	80022d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002212:	4b32      	ldr	r3, [pc, #200]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0ac      	b.n	800237c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800222e:	f7fe feeb 	bl	8001008 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe fee7 	bl	8001008 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e099      	b.n	800237c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002254:	4b21      	ldr	r3, [pc, #132]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_RCC_OscConfig+0x77c>)
 800225a:	4013      	ands	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002264:	3a01      	subs	r2, #1
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	4311      	orrs	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800226e:	0212      	lsls	r2, r2, #8
 8002270:	4311      	orrs	r1, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002276:	0852      	lsrs	r2, r2, #1
 8002278:	3a01      	subs	r2, #1
 800227a:	0552      	lsls	r2, r2, #21
 800227c:	4311      	orrs	r1, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002282:	0852      	lsrs	r2, r2, #1
 8002284:	3a01      	subs	r2, #1
 8002286:	0652      	lsls	r2, r2, #25
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800228e:	06d2      	lsls	r2, r2, #27
 8002290:	430a      	orrs	r2, r1
 8002292:	4912      	ldr	r1, [pc, #72]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 8002294:	4313      	orrs	r3, r2
 8002296:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b0:	f7fe feaa 	bl	8001008 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fea6 	bl	8001008 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e058      	b.n	800237c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_RCC_OscConfig+0x778>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d6:	e050      	b.n	800237a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e04f      	b.n	800237c <HAL_RCC_OscConfig+0x818>
 80022dc:	40021000 	.word	0x40021000
 80022e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d144      	bne.n	800237a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a23      	ldr	r2, [pc, #140]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022fc:	4b21      	ldr	r3, [pc, #132]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a20      	ldr	r2, [pc, #128]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002308:	f7fe fe7e 	bl	8001008 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe fe7a 	bl	8001008 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e02c      	b.n	800237c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x7ac>
 800232e:	e024      	b.n	800237a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d01f      	beq.n	8002376 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 800233c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe fe61 	bl	8001008 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fe5d 	bl	8001008 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e00f      	b.n	800237c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4905      	ldr	r1, [pc, #20]	; (8002384 <HAL_RCC_OscConfig+0x820>)
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_OscConfig+0x824>)
 8002370:	4013      	ands	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
 8002374:	e001      	b.n	800237a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	feeefffc 	.word	0xfeeefffc

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0e7      	b.n	8002570 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b75      	ldr	r3, [pc, #468]	; (8002578 <HAL_RCC_ClockConfig+0x1ec>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d910      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b72      	ldr	r3, [pc, #456]	; (8002578 <HAL_RCC_ClockConfig+0x1ec>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0207 	bic.w	r2, r3, #7
 80023b6:	4970      	ldr	r1, [pc, #448]	; (8002578 <HAL_RCC_ClockConfig+0x1ec>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b6e      	ldr	r3, [pc, #440]	; (8002578 <HAL_RCC_ClockConfig+0x1ec>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0cf      	b.n	8002570 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d010      	beq.n	80023fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d908      	bls.n	80023fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4960      	ldr	r1, [pc, #384]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d04c      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	4b5a      	ldr	r3, [pc, #360]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d121      	bne.n	8002462 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0a6      	b.n	8002570 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242a:	4b54      	ldr	r3, [pc, #336]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d115      	bne.n	8002462 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e09a      	b.n	8002570 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002442:	4b4e      	ldr	r3, [pc, #312]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e08e      	b.n	8002570 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002452:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e086      	b.n	8002570 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 0203 	bic.w	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	4943      	ldr	r1, [pc, #268]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002474:	f7fe fdc8 	bl	8001008 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	e00a      	b.n	8002492 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247c:	f7fe fdc4 	bl	8001008 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f241 3288 	movw	r2, #5000	; 0x1388
 800248a:	4293      	cmp	r3, r2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e06e      	b.n	8002570 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	4b3a      	ldr	r3, [pc, #232]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 020c 	and.w	r2, r3, #12
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d1eb      	bne.n	800247c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d010      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024bc:	429a      	cmp	r2, r3
 80024be:	d208      	bcs.n	80024d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	492b      	ldr	r1, [pc, #172]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d2:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_ClockConfig+0x1ec>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d210      	bcs.n	8002502 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_ClockConfig+0x1ec>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 0207 	bic.w	r2, r3, #7
 80024e8:	4923      	ldr	r1, [pc, #140]	; (8002578 <HAL_RCC_ClockConfig+0x1ec>)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f0:	4b21      	ldr	r3, [pc, #132]	; (8002578 <HAL_RCC_ClockConfig+0x1ec>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e036      	b.n	8002570 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	4918      	ldr	r1, [pc, #96]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4910      	ldr	r1, [pc, #64]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002540:	f000 f824 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_ClockConfig+0x1f0>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	490b      	ldr	r1, [pc, #44]	; (8002580 <HAL_RCC_ClockConfig+0x1f4>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
 800255c:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1f8>)
 800255e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1fc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fcff 	bl	8000f68 <HAL_InitTick>
 800256a:	4603      	mov	r3, r0
 800256c:	72fb      	strb	r3, [r7, #11]

  return status;
 800256e:	7afb      	ldrb	r3, [r7, #11]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40022000 	.word	0x40022000
 800257c:	40021000 	.word	0x40021000
 8002580:	080055c0 	.word	0x080055c0
 8002584:	20000010 	.word	0x20000010
 8002588:	20000014 	.word	0x20000014

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259a:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x34>
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d121      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d11e      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e005      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025e8:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10d      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d102      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002604:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_RCC_GetSysClockFreq+0x110>)
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e004      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d101      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002612:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d134      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0xa6>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d003      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0xac>
 8002630:	e005      	b.n	800263e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_RCC_GetSysClockFreq+0x110>)
 8002634:	617b      	str	r3, [r7, #20]
      break;
 8002636:	e005      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800263a:	617b      	str	r3, [r7, #20]
      break;
 800263c:	e002      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	3301      	adds	r3, #1
 8002650:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	fb03 f202 	mul.w	r2, r3, r2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	0e5b      	lsrs	r3, r3, #25
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	3301      	adds	r3, #1
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002684:	69bb      	ldr	r3, [r7, #24]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	080055d8 	.word	0x080055d8
 800269c:	00f42400 	.word	0x00f42400
 80026a0:	007a1200 	.word	0x007a1200

080026a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000010 	.word	0x20000010

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c0:	f7ff fff0 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4904      	ldr	r1, [pc, #16]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	080055d0 	.word	0x080055d0

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026ec:	f7ff ffda 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	080055d0 	.word	0x080055d0

08002714 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800272c:	f7ff f9b6 	bl	8001a9c <HAL_PWREx_GetVoltageRange>
 8002730:	6178      	str	r0, [r7, #20]
 8002732:	e014      	b.n	800275e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	4a24      	ldr	r2, [pc, #144]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	6593      	str	r3, [r2, #88]	; 0x58
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800274c:	f7ff f9a6 	bl	8001a9c <HAL_PWREx_GetVoltageRange>
 8002750:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002764:	d10b      	bne.n	800277e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b80      	cmp	r3, #128	; 0x80
 800276a:	d919      	bls.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2ba0      	cmp	r3, #160	; 0xa0
 8002770:	d902      	bls.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002772:	2302      	movs	r3, #2
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	e013      	b.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002778:	2301      	movs	r3, #1
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	e010      	b.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b80      	cmp	r3, #128	; 0x80
 8002782:	d902      	bls.n	800278a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002784:	2303      	movs	r3, #3
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e00a      	b.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b80      	cmp	r3, #128	; 0x80
 800278e:	d102      	bne.n	8002796 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002790:	2302      	movs	r3, #2
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	e004      	b.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b70      	cmp	r3, #112	; 0x70
 800279a:	d101      	bne.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800279c:	2301      	movs	r3, #1
 800279e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 0207 	bic.w	r2, r3, #7
 80027a8:	4909      	ldr	r1, [pc, #36]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40022000 	.word	0x40022000

080027d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027dc:	2300      	movs	r3, #0
 80027de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027e0:	2300      	movs	r3, #0
 80027e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d031      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027f8:	d01a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80027fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027fe:	d814      	bhi.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d009      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002804:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002808:	d10f      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800280a:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a5c      	ldr	r2, [pc, #368]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002814:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002816:	e00c      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f9de 	bl	8002be0 <RCCEx_PLLSAI1_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002828:	e003      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	74fb      	strb	r3, [r7, #19]
      break;
 800282e:	e000      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002832:	7cfb      	ldrb	r3, [r7, #19]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10b      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002838:	4b51      	ldr	r3, [pc, #324]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	494e      	ldr	r1, [pc, #312]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800284e:	e001      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 809e 	beq.w	800299e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002866:	4b46      	ldr	r3, [pc, #280]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00d      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287c:	4b40      	ldr	r3, [pc, #256]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	4a3f      	ldr	r2, [pc, #252]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002886:	6593      	str	r3, [r2, #88]	; 0x58
 8002888:	4b3d      	ldr	r3, [pc, #244]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002894:	2301      	movs	r3, #1
 8002896:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002898:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a39      	ldr	r2, [pc, #228]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fbb0 	bl	8001008 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028aa:	e009      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ac:	f7fe fbac 	bl	8001008 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d902      	bls.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	74fb      	strb	r3, [r7, #19]
        break;
 80028be:	e005      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028c0:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ef      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d15a      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028d2:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01e      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d019      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028fa:	4b21      	ldr	r3, [pc, #132]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	4a1b      	ldr	r2, [pc, #108]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800291a:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d016      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fb6c 	bl	8001008 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002932:	e00b      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe fb68 	bl	8001008 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d902      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	74fb      	strb	r3, [r7, #19]
            break;
 800294a:	e006      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ec      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10b      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002966:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296e:	4904      	ldr	r1, [pc, #16]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002976:	e009      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	74bb      	strb	r3, [r7, #18]
 800297c:	e006      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298c:	7c7b      	ldrb	r3, [r7, #17]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4b8a      	ldr	r3, [pc, #552]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	4a89      	ldr	r2, [pc, #548]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029aa:	4b84      	ldr	r3, [pc, #528]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f023 0203 	bic.w	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4980      	ldr	r1, [pc, #512]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029cc:	4b7b      	ldr	r3, [pc, #492]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 020c 	bic.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	4978      	ldr	r1, [pc, #480]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ee:	4b73      	ldr	r3, [pc, #460]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	496f      	ldr	r1, [pc, #444]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a10:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1e:	4967      	ldr	r1, [pc, #412]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a32:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	495e      	ldr	r1, [pc, #376]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	4956      	ldr	r1, [pc, #344]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	494d      	ldr	r1, [pc, #308]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d028      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b48      	ldr	r3, [pc, #288]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4945      	ldr	r1, [pc, #276]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
 8002ac4:	e011      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ace:	d10c      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f882 	bl	8002be0 <RCCEx_PLLSAI1_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d028      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002af6:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	492d      	ldr	r1, [pc, #180]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b14:	d106      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4a28      	ldr	r2, [pc, #160]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b20:	60d3      	str	r3, [r2, #12]
 8002b22:	e011      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f853 	bl	8002be0 <RCCEx_PLLSAI1_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01c      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b62:	4916      	ldr	r1, [pc, #88]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b72:	d10c      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f830 	bl	8002be0 <RCCEx_PLLSAI1_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	4904      	ldr	r1, [pc, #16]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000

08002be0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bee:	4b74      	ldr	r3, [pc, #464]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d018      	beq.n	8002c2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bfa:	4b71      	ldr	r3, [pc, #452]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0203 	and.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d10d      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c12:	4b6b      	ldr	r3, [pc, #428]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
       ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d047      	beq.n	8002cb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	e044      	b.n	8002cb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d018      	beq.n	8002c66 <RCCEx_PLLSAI1_Config+0x86>
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d825      	bhi.n	8002c84 <RCCEx_PLLSAI1_Config+0xa4>
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d002      	beq.n	8002c42 <RCCEx_PLLSAI1_Config+0x62>
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d009      	beq.n	8002c54 <RCCEx_PLLSAI1_Config+0x74>
 8002c40:	e020      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c42:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d11d      	bne.n	8002c8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c52:	e01a      	b.n	8002c8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c54:	4b5a      	ldr	r3, [pc, #360]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d116      	bne.n	8002c8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c64:	e013      	b.n	8002c8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c66:	4b56      	ldr	r3, [pc, #344]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10f      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c82:	e006      	b.n	8002c92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      break;
 8002c88:	e004      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e002      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e000      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c9a:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	4943      	ldr	r1, [pc, #268]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d17c      	bne.n	8002db6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cbc:	4b40      	ldr	r3, [pc, #256]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a3f      	ldr	r2, [pc, #252]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc8:	f7fe f99e 	bl	8001008 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cce:	e009      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cd0:	f7fe f99a 	bl	8001008 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d902      	bls.n	8002ce4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ce2:	e005      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ce4:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ef      	bne.n	8002cd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d15f      	bne.n	8002db6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d110      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cfc:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002d04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6892      	ldr	r2, [r2, #8]
 8002d0c:	0211      	lsls	r1, r2, #8
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68d2      	ldr	r2, [r2, #12]
 8002d12:	06d2      	lsls	r2, r2, #27
 8002d14:	430a      	orrs	r2, r1
 8002d16:	492a      	ldr	r1, [pc, #168]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	610b      	str	r3, [r1, #16]
 8002d1c:	e027      	b.n	8002d6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d112      	bne.n	8002d4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d24:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6892      	ldr	r2, [r2, #8]
 8002d34:	0211      	lsls	r1, r2, #8
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6912      	ldr	r2, [r2, #16]
 8002d3a:	0852      	lsrs	r2, r2, #1
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0552      	lsls	r2, r2, #21
 8002d40:	430a      	orrs	r2, r1
 8002d42:	491f      	ldr	r1, [pc, #124]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	610b      	str	r3, [r1, #16]
 8002d48:	e011      	b.n	8002d6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6892      	ldr	r2, [r2, #8]
 8002d5a:	0211      	lsls	r1, r2, #8
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6952      	ldr	r2, [r2, #20]
 8002d60:	0852      	lsrs	r2, r2, #1
 8002d62:	3a01      	subs	r2, #1
 8002d64:	0652      	lsls	r2, r2, #25
 8002d66:	430a      	orrs	r2, r1
 8002d68:	4915      	ldr	r1, [pc, #84]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fe f945 	bl	8001008 <HAL_GetTick>
 8002d7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d80:	e009      	b.n	8002d96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d82:	f7fe f941 	bl	8001008 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d902      	bls.n	8002d96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	73fb      	strb	r3, [r7, #15]
          break;
 8002d94:	e005      	b.n	8002da2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0ef      	beq.n	8002d82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d06c      	beq.n	8002eb0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fd fee4 	bl	8000bb8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	22ca      	movs	r2, #202	; 0xca
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2253      	movs	r2, #83	; 0x53
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f87c 	bl	8002f06 <RTC_EnterInitMode>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d14b      	bne.n	8002eb0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6899      	ldr	r1, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68d2      	ldr	r2, [r2, #12]
 8002e52:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6919      	ldr	r1, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	041a      	lsls	r2, r3, #16
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f87f 	bl	8002f6c <RTC_ExitInitMode>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11b      	bne.n	8002eb0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0203 	bic.w	r2, r2, #3
 8002e86:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	22ff      	movs	r2, #255	; 0xff
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ed0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002ed2:	f7fe f899 	bl	8001008 <HAL_GetTick>
 8002ed6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ed8:	e009      	b.n	8002eee <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002eda:	f7fe f895 	bl	8001008 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ee8:	d901      	bls.n	8002eee <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e007      	b.n	8002efe <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ee      	beq.n	8002eda <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d120      	bne.n	8002f62 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002f2a:	f7fe f86d 	bl	8001008 <HAL_GetTick>
 8002f2e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f30:	e00d      	b.n	8002f4e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002f32:	f7fe f869 	bl	8001008 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f40:	d905      	bls.n	8002f4e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2203      	movs	r2, #3
 8002f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <RTC_EnterInitMode+0x5c>
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d1e7      	bne.n	8002f32 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002f78:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <RTC_ExitInitMode+0x78>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <RTC_ExitInitMode+0x78>)
 8002f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f82:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <RTC_ExitInitMode+0x78>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10c      	bne.n	8002faa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff92 	bl	8002eba <HAL_RTC_WaitForSynchro>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01e      	beq.n	8002fda <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e017      	b.n	8002fda <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <RTC_ExitInitMode+0x78>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <RTC_ExitInitMode+0x78>)
 8002fb0:	f023 0320 	bic.w	r3, r3, #32
 8002fb4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ff7f 	bl	8002eba <HAL_RTC_WaitForSynchro>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <RTC_ExitInitMode+0x78>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <RTC_ExitInitMode+0x78>)
 8002fd4:	f043 0320 	orr.w	r3, r3, #32
 8002fd8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40002800 	.word	0x40002800

08002fe8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002ff2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ff6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003016:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f80b 	bl	8003034 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40010400 	.word	0x40010400

08003034 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e049      	b.n	80030ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fd fdda 	bl	8000c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f000 fa00 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d001      	beq.n	8003110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e03b      	b.n	8003188 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a19      	ldr	r2, [pc, #100]	; (8003194 <HAL_TIM_Base_Start_IT+0x9c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x4e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313a:	d004      	beq.n	8003146 <HAL_TIM_Base_Start_IT+0x4e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a15      	ldr	r2, [pc, #84]	; (8003198 <HAL_TIM_Base_Start_IT+0xa0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d115      	bne.n	8003172 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	4b13      	ldr	r3, [pc, #76]	; (800319c <HAL_TIM_Base_Start_IT+0xa4>)
 800314e:	4013      	ands	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b06      	cmp	r3, #6
 8003156:	d015      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x8c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d011      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e008      	b.n	8003184 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e000      	b.n	8003186 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003184:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40014000 	.word	0x40014000
 800319c:	00010007 	.word	0x00010007

080031a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6a1a      	ldr	r2, [r3, #32]
 80031be:	f241 1311 	movw	r3, #4369	; 0x1111
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10f      	bne.n	80031e8 <HAL_TIM_Base_Stop_IT+0x48>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	f240 4344 	movw	r3, #1092	; 0x444
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d107      	bne.n	80031e8 <HAL_TIM_Base_Stop_IT+0x48>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d122      	bne.n	800325a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b02      	cmp	r3, #2
 8003220:	d11b      	bne.n	800325a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0202 	mvn.w	r2, #2
 800322a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f905 	bl	8003450 <HAL_TIM_IC_CaptureCallback>
 8003246:	e005      	b.n	8003254 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f8f7 	bl	800343c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f908 	bl	8003464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d122      	bne.n	80032ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	d11b      	bne.n	80032ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0204 	mvn.w	r2, #4
 800327e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f8db 	bl	8003450 <HAL_TIM_IC_CaptureCallback>
 800329a:	e005      	b.n	80032a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8cd 	bl	800343c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8de 	bl	8003464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d122      	bne.n	8003302 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d11b      	bne.n	8003302 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f06f 0208 	mvn.w	r2, #8
 80032d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2204      	movs	r2, #4
 80032d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8b1 	bl	8003450 <HAL_TIM_IC_CaptureCallback>
 80032ee:	e005      	b.n	80032fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8a3 	bl	800343c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8b4 	bl	8003464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d122      	bne.n	8003356 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b10      	cmp	r3, #16
 800331c:	d11b      	bne.n	8003356 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f06f 0210 	mvn.w	r2, #16
 8003326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2208      	movs	r2, #8
 800332c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f887 	bl	8003450 <HAL_TIM_IC_CaptureCallback>
 8003342:	e005      	b.n	8003350 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f879 	bl	800343c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f88a 	bl	8003464 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d10e      	bne.n	8003382 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0201 	mvn.w	r2, #1
 800337a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fd fb93 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d10e      	bne.n	80033ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b80      	cmp	r3, #128	; 0x80
 800339c:	d107      	bne.n	80033ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f943 	bl	8003634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033bc:	d10e      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c8:	2b80      	cmp	r3, #128	; 0x80
 80033ca:	d107      	bne.n	80033dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f936 	bl	8003648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d10e      	bne.n	8003408 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d107      	bne.n	8003408 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f838 	bl	8003478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b20      	cmp	r3, #32
 8003414:	d10e      	bne.n	8003434 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b20      	cmp	r3, #32
 8003422:	d107      	bne.n	8003434 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0220 	mvn.w	r2, #32
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8f6 	bl	8003620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a2a      	ldr	r2, [pc, #168]	; (8003548 <TIM_Base_SetConfig+0xbc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0x20>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d108      	bne.n	80034be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a21      	ldr	r2, [pc, #132]	; (8003548 <TIM_Base_SetConfig+0xbc>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00b      	beq.n	80034de <TIM_Base_SetConfig+0x52>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034cc:	d007      	beq.n	80034de <TIM_Base_SetConfig+0x52>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <TIM_Base_SetConfig+0xc0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d003      	beq.n	80034de <TIM_Base_SetConfig+0x52>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a1d      	ldr	r2, [pc, #116]	; (8003550 <TIM_Base_SetConfig+0xc4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d108      	bne.n	80034f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <TIM_Base_SetConfig+0xbc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <TIM_Base_SetConfig+0xa0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a0b      	ldr	r2, [pc, #44]	; (800354c <TIM_Base_SetConfig+0xc0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_Base_SetConfig+0xa0>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <TIM_Base_SetConfig+0xc4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d103      	bne.n	8003534 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	615a      	str	r2, [r3, #20]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400

08003554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003568:	2302      	movs	r3, #2
 800356a:	e04f      	b.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a21      	ldr	r2, [pc, #132]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800359c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a14      	ldr	r2, [pc, #80]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d004      	beq.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d10c      	bne.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40014000 	.word	0x40014000

08003620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e040      	b.n	80036f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd faf8 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fbca 	bl	8003e34 <UART_SetConfig>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e022      	b.n	80036f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fdea 	bl	800428c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fe71 	bl	80043d0 <UART_CheckIdleState>
 80036ee:	4603      	mov	r3, r0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370c:	2b20      	cmp	r3, #32
 800370e:	f040 8082 	bne.w	8003816 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_UART_Transmit+0x26>
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07a      	b.n	8003818 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_UART_Transmit+0x38>
 800372c:	2302      	movs	r3, #2
 800372e:	e073      	b.n	8003818 <HAL_UART_Transmit+0x120>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2221      	movs	r2, #33	; 0x21
 8003744:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003746:	f7fd fc5f 	bl	8001008 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d108      	bne.n	8003778 <HAL_UART_Transmit+0x80>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d104      	bne.n	8003778 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	e003      	b.n	8003780 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800377c:	2300      	movs	r3, #0
 800377e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003788:	e02d      	b.n	80037e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	2180      	movs	r1, #128	; 0x80
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fe64 	bl	8004462 <UART_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e039      	b.n	8003818 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b6:	b292      	uxth	r2, r2
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	3302      	adds	r3, #2
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	e008      	b.n	80037d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b292      	uxth	r2, r2
 80037cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1cb      	bne.n	800378a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fe30 	bl	8004462 <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e005      	b.n	8003818 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003816:	2302      	movs	r3, #2
  }
}
 8003818:	4618      	mov	r0, r3
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b0ba      	sub	sp, #232	; 0xe8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003846:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800384a:	f640 030f 	movw	r3, #2063	; 0x80f
 800384e:	4013      	ands	r3, r2
 8003850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d115      	bne.n	8003888 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800385c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00f      	beq.n	8003888 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 82a6 	beq.w	8003dca <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
      }
      return;
 8003886:	e2a0      	b.n	8003dca <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8117 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800389e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80038a2:	4b85      	ldr	r3, [pc, #532]	; (8003ab8 <HAL_UART_IRQHandler+0x298>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 810a 	beq.w	8003ac0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d011      	beq.n	80038dc <HAL_UART_IRQHandler+0xbc>
 80038b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2201      	movs	r2, #1
 80038ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d011      	beq.n	800390c <HAL_UART_IRQHandler+0xec>
 80038e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2202      	movs	r2, #2
 80038fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003902:	f043 0204 	orr.w	r2, r3, #4
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800390c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d011      	beq.n	800393c <HAL_UART_IRQHandler+0x11c>
 8003918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2204      	movs	r2, #4
 800392a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003932:	f043 0202 	orr.w	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800393c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d017      	beq.n	8003978 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003958:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2208      	movs	r2, #8
 8003966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800396e:	f043 0208 	orr.w	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003980:	2b00      	cmp	r3, #0
 8003982:	d012      	beq.n	80039aa <HAL_UART_IRQHandler+0x18a>
 8003984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003988:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00c      	beq.n	80039aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 820c 	beq.w	8003dce <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d005      	beq.n	8003a02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d04f      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 febe 	bl	8004784 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	d141      	bne.n	8003a9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1d9      	bne.n	8003a16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d013      	beq.n	8003a92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	4a13      	ldr	r2, [pc, #76]	; (8003abc <HAL_UART_IRQHandler+0x29c>)
 8003a70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd fd5e 	bl	8001538 <HAL_DMA_Abort_IT>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d017      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a90:	e00f      	b.n	8003ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9c4 	bl	8003e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a98:	e00b      	b.n	8003ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f9c0 	bl	8003e20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f9bc 	bl	8003e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003ab0:	e18d      	b.n	8003dce <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab2:	bf00      	nop
    return;
 8003ab4:	e18b      	b.n	8003dce <HAL_UART_IRQHandler+0x5ae>
 8003ab6:	bf00      	nop
 8003ab8:	04000120 	.word	0x04000120
 8003abc:	08004a23 	.word	0x08004a23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	f040 8146 	bne.w	8003d56 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 813f 	beq.w	8003d56 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8138 	beq.w	8003d56 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2210      	movs	r2, #16
 8003aec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	f040 80b4 	bne.w	8003c66 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 815f 	beq.w	8003dd2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	f080 8157 	bcs.w	8003dd2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 8085 	bne.w	8003c4a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b6e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1da      	bne.n	8003b40 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e1      	bne.n	8003b8a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3308      	adds	r3, #8
 8003be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e3      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1a:	f023 0310 	bic.w	r3, r3, #16
 8003c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e4      	bne.n	8003c0a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fd fc39 	bl	80014bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fc ff62 	bl	8000b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c64:	e0b5      	b.n	8003dd2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80a7 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a2 	beq.w	8003dd6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e4      	bne.n	8003c92 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	623b      	str	r3, [r7, #32]
   return(result);
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cec:	633a      	str	r2, [r7, #48]	; 0x30
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e3      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0310 	bic.w	r3, r3, #16
 8003d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	69b9      	ldr	r1, [r7, #24]
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	617b      	str	r3, [r7, #20]
   return(result);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e4      	bne.n	8003d12 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fc feea 	bl	8000b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d54:	e03f      	b.n	8003dd6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00e      	beq.n	8003d80 <HAL_UART_IRQHandler+0x560>
 8003d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fe92 	bl	8004aa2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d7e:	e02d      	b.n	8003ddc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01c      	beq.n	8003dda <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
    }
    return;
 8003da8:	e017      	b.n	8003dda <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d012      	beq.n	8003ddc <HAL_UART_IRQHandler+0x5bc>
 8003db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00c      	beq.n	8003ddc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fe43 	bl	8004a4e <UART_EndTransmit_IT>
    return;
 8003dc8:	e008      	b.n	8003ddc <HAL_UART_IRQHandler+0x5bc>
      return;
 8003dca:	bf00      	nop
 8003dcc:	e006      	b.n	8003ddc <HAL_UART_IRQHandler+0x5bc>
    return;
 8003dce:	bf00      	nop
 8003dd0:	e004      	b.n	8003ddc <HAL_UART_IRQHandler+0x5bc>
      return;
 8003dd2:	bf00      	nop
 8003dd4:	e002      	b.n	8003ddc <HAL_UART_IRQHandler+0x5bc>
      return;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <HAL_UART_IRQHandler+0x5bc>
    return;
 8003dda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ddc:	37e8      	adds	r7, #232	; 0xe8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop

08003de4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e38:	b08a      	sub	sp, #40	; 0x28
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4bb4      	ldr	r3, [pc, #720]	; (8004134 <UART_SetConfig+0x300>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4aa9      	ldr	r2, [pc, #676]	; (8004138 <UART_SetConfig+0x304>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4aa0      	ldr	r2, [pc, #640]	; (800413c <UART_SetConfig+0x308>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d126      	bne.n	8003f0c <UART_SetConfig+0xd8>
 8003ebe:	4ba0      	ldr	r3, [pc, #640]	; (8004140 <UART_SetConfig+0x30c>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d81b      	bhi.n	8003f04 <UART_SetConfig+0xd0>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <UART_SetConfig+0xa0>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003ef5 	.word	0x08003ef5
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003efd 	.word	0x08003efd
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eea:	e080      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003eec:	2302      	movs	r3, #2
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef2:	e07c      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efa:	e078      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003efc:	2308      	movs	r3, #8
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f02:	e074      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003f04:	2310      	movs	r3, #16
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0a:	e070      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a8c      	ldr	r2, [pc, #560]	; (8004144 <UART_SetConfig+0x310>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d138      	bne.n	8003f88 <UART_SetConfig+0x154>
 8003f16:	4b8a      	ldr	r3, [pc, #552]	; (8004140 <UART_SetConfig+0x30c>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d82d      	bhi.n	8003f80 <UART_SetConfig+0x14c>
 8003f24:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0xf8>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f61 	.word	0x08003f61
 8003f30:	08003f81 	.word	0x08003f81
 8003f34:	08003f81 	.word	0x08003f81
 8003f38:	08003f81 	.word	0x08003f81
 8003f3c:	08003f71 	.word	0x08003f71
 8003f40:	08003f81 	.word	0x08003f81
 8003f44:	08003f81 	.word	0x08003f81
 8003f48:	08003f81 	.word	0x08003f81
 8003f4c:	08003f69 	.word	0x08003f69
 8003f50:	08003f81 	.word	0x08003f81
 8003f54:	08003f81 	.word	0x08003f81
 8003f58:	08003f81 	.word	0x08003f81
 8003f5c:	08003f79 	.word	0x08003f79
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f66:	e042      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6e:	e03e      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003f70:	2304      	movs	r3, #4
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f76:	e03a      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003f78:	2308      	movs	r3, #8
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7e:	e036      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003f80:	2310      	movs	r3, #16
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f86:	e032      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a6a      	ldr	r2, [pc, #424]	; (8004138 <UART_SetConfig+0x304>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d12a      	bne.n	8003fe8 <UART_SetConfig+0x1b4>
 8003f92:	4b6b      	ldr	r3, [pc, #428]	; (8004140 <UART_SetConfig+0x30c>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa0:	d01a      	beq.n	8003fd8 <UART_SetConfig+0x1a4>
 8003fa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa6:	d81b      	bhi.n	8003fe0 <UART_SetConfig+0x1ac>
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d00c      	beq.n	8003fc8 <UART_SetConfig+0x194>
 8003fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb2:	d815      	bhi.n	8003fe0 <UART_SetConfig+0x1ac>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <UART_SetConfig+0x18c>
 8003fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbc:	d008      	beq.n	8003fd0 <UART_SetConfig+0x19c>
 8003fbe:	e00f      	b.n	8003fe0 <UART_SetConfig+0x1ac>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e012      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fce:	e00e      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd6:	e00a      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fde:	e006      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe6:	e002      	b.n	8003fee <UART_SetConfig+0x1ba>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a51      	ldr	r2, [pc, #324]	; (8004138 <UART_SetConfig+0x304>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d17a      	bne.n	80040ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d824      	bhi.n	800404a <UART_SetConfig+0x216>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <UART_SetConfig+0x1d4>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	0800402d 	.word	0x0800402d
 800400c:	0800404b 	.word	0x0800404b
 8004010:	08004035 	.word	0x08004035
 8004014:	0800404b 	.word	0x0800404b
 8004018:	0800403b 	.word	0x0800403b
 800401c:	0800404b 	.word	0x0800404b
 8004020:	0800404b 	.word	0x0800404b
 8004024:	0800404b 	.word	0x0800404b
 8004028:	08004043 	.word	0x08004043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7fe fb46 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004030:	61f8      	str	r0, [r7, #28]
        break;
 8004032:	e010      	b.n	8004056 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004034:	4b44      	ldr	r3, [pc, #272]	; (8004148 <UART_SetConfig+0x314>)
 8004036:	61fb      	str	r3, [r7, #28]
        break;
 8004038:	e00d      	b.n	8004056 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7fe faa7 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800403e:	61f8      	str	r0, [r7, #28]
        break;
 8004040:	e009      	b.n	8004056 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	61fb      	str	r3, [r7, #28]
        break;
 8004048:	e005      	b.n	8004056 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004054:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8107 	beq.w	800426c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	429a      	cmp	r2, r3
 800406c:	d305      	bcc.n	800407a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	429a      	cmp	r2, r3
 8004078:	d903      	bls.n	8004082 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004080:	e0f4      	b.n	800426c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2200      	movs	r2, #0
 8004086:	461c      	mov	r4, r3
 8004088:	4615      	mov	r5, r2
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	022b      	lsls	r3, r5, #8
 8004094:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004098:	0222      	lsls	r2, r4, #8
 800409a:	68f9      	ldr	r1, [r7, #12]
 800409c:	6849      	ldr	r1, [r1, #4]
 800409e:	0849      	lsrs	r1, r1, #1
 80040a0:	2000      	movs	r0, #0
 80040a2:	4688      	mov	r8, r1
 80040a4:	4681      	mov	r9, r0
 80040a6:	eb12 0a08 	adds.w	sl, r2, r8
 80040aa:	eb43 0b09 	adc.w	fp, r3, r9
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040bc:	4650      	mov	r0, sl
 80040be:	4659      	mov	r1, fp
 80040c0:	f7fc f8de 	bl	8000280 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d2:	d308      	bcc.n	80040e6 <UART_SetConfig+0x2b2>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040da:	d204      	bcs.n	80040e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	60da      	str	r2, [r3, #12]
 80040e4:	e0c2      	b.n	800426c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040ec:	e0be      	b.n	800426c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f6:	d16a      	bne.n	80041ce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80040f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d834      	bhi.n	800416a <UART_SetConfig+0x336>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <UART_SetConfig+0x2d4>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	0800412d 	.word	0x0800412d
 800410c:	0800414d 	.word	0x0800414d
 8004110:	08004155 	.word	0x08004155
 8004114:	0800416b 	.word	0x0800416b
 8004118:	0800415b 	.word	0x0800415b
 800411c:	0800416b 	.word	0x0800416b
 8004120:	0800416b 	.word	0x0800416b
 8004124:	0800416b 	.word	0x0800416b
 8004128:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800412c:	f7fe fac6 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004130:	61f8      	str	r0, [r7, #28]
        break;
 8004132:	e020      	b.n	8004176 <UART_SetConfig+0x342>
 8004134:	efff69f3 	.word	0xefff69f3
 8004138:	40008000 	.word	0x40008000
 800413c:	40013800 	.word	0x40013800
 8004140:	40021000 	.word	0x40021000
 8004144:	40004400 	.word	0x40004400
 8004148:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7fe facc 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 8004150:	61f8      	str	r0, [r7, #28]
        break;
 8004152:	e010      	b.n	8004176 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b4c      	ldr	r3, [pc, #304]	; (8004288 <UART_SetConfig+0x454>)
 8004156:	61fb      	str	r3, [r7, #28]
        break;
 8004158:	e00d      	b.n	8004176 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe fa17 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800415e:	61f8      	str	r0, [r7, #28]
        break;
 8004160:	e009      	b.n	8004176 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004166:	61fb      	str	r3, [r7, #28]
        break;
 8004168:	e005      	b.n	8004176 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004174:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d077      	beq.n	800426c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	005a      	lsls	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	441a      	add	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d916      	bls.n	80041c6 <UART_SetConfig+0x392>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419e:	d212      	bcs.n	80041c6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f023 030f 	bic.w	r3, r3, #15
 80041a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	8afb      	ldrh	r3, [r7, #22]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	8afa      	ldrh	r2, [r7, #22]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	e052      	b.n	800426c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041cc:	e04e      	b.n	800426c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d827      	bhi.n	8004226 <UART_SetConfig+0x3f2>
 80041d6:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x3a8>)
 80041d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041dc:	08004201 	.word	0x08004201
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004211 	.word	0x08004211
 80041e8:	08004227 	.word	0x08004227
 80041ec:	08004217 	.word	0x08004217
 80041f0:	08004227 	.word	0x08004227
 80041f4:	08004227 	.word	0x08004227
 80041f8:	08004227 	.word	0x08004227
 80041fc:	0800421f 	.word	0x0800421f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7fe fa5c 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004204:	61f8      	str	r0, [r7, #28]
        break;
 8004206:	e014      	b.n	8004232 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7fe fa6e 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 800420c:	61f8      	str	r0, [r7, #28]
        break;
 800420e:	e010      	b.n	8004232 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004210:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <UART_SetConfig+0x454>)
 8004212:	61fb      	str	r3, [r7, #28]
        break;
 8004214:	e00d      	b.n	8004232 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004216:	f7fe f9b9 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800421a:	61f8      	str	r0, [r7, #28]
        break;
 800421c:	e009      	b.n	8004232 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004222:	61fb      	str	r3, [r7, #28]
        break;
 8004224:	e005      	b.n	8004232 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004230:	bf00      	nop
    }

    if (pclk != 0U)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d019      	beq.n	800426c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	085a      	lsrs	r2, r3, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	441a      	add	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b0f      	cmp	r3, #15
 8004250:	d909      	bls.n	8004266 <UART_SetConfig+0x432>
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004258:	d205      	bcs.n	8004266 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60da      	str	r2, [r3, #12]
 8004264:	e002      	b.n	800426c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004278:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800427c:	4618      	mov	r0, r3
 800427e:	3728      	adds	r7, #40	; 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004286:	bf00      	nop
 8004288:	00f42400 	.word	0x00f42400

0800428c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01a      	beq.n	80043a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438a:	d10a      	bne.n	80043a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
  }
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043e0:	f7fc fe12 	bl	8001008 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d10e      	bne.n	8004412 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f82d 	bl	8004462 <UART_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e023      	b.n	800445a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b04      	cmp	r3, #4
 800441e:	d10e      	bne.n	800443e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f817 	bl	8004462 <UART_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e00d      	b.n	800445a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b09c      	sub	sp, #112	; 0x70
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	4613      	mov	r3, r2
 8004470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004472:	e0a5      	b.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	f000 80a1 	beq.w	80045c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fc fdc3 	bl	8001008 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <UART_WaitOnFlagUntilTimeout+0x32>
 800448e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004490:	2b00      	cmp	r3, #0
 8004492:	d13e      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044a8:	667b      	str	r3, [r7, #100]	; 0x64
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e6      	bne.n	8004494 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3308      	adds	r3, #8
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	663b      	str	r3, [r7, #96]	; 0x60
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80044e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e5      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e067      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d04f      	beq.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800452e:	d147      	bne.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004538:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800454e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
 800455a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800455e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e6      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	613b      	str	r3, [r7, #16]
   return(result);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	66bb      	str	r3, [r7, #104]	; 0x68
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3308      	adds	r3, #8
 800458a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800458c:	623a      	str	r2, [r7, #32]
 800458e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	69f9      	ldr	r1, [r7, #28]
 8004592:	6a3a      	ldr	r2, [r7, #32]
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	61bb      	str	r3, [r7, #24]
   return(result);
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e5      	bne.n	800456c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e010      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4013      	ands	r3, r2
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	429a      	cmp	r2, r3
 80045dc:	f43f af4a 	beq.w	8004474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3770      	adds	r7, #112	; 0x70
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b096      	sub	sp, #88	; 0x58
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2222      	movs	r2, #34	; 0x22
 8004614:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	2b00      	cmp	r3, #0
 800461c:	d02b      	beq.n	8004676 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a42      	ldr	r2, [pc, #264]	; (800472c <UART_Start_Receive_DMA+0x140>)
 8004624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a41      	ldr	r2, [pc, #260]	; (8004730 <UART_Start_Receive_DMA+0x144>)
 800462c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a40      	ldr	r2, [pc, #256]	; (8004734 <UART_Start_Receive_DMA+0x148>)
 8004634:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	2200      	movs	r2, #0
 800463c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3324      	adds	r3, #36	; 0x24
 8004648:	4619      	mov	r1, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	461a      	mov	r2, r3
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	f7fc fed3 	bl	80013fc <HAL_DMA_Start_IT>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00c      	beq.n	8004676 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2210      	movs	r2, #16
 8004660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e055      	b.n	8004722 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469a:	657b      	str	r3, [r7, #84]	; 0x54
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e6      	bne.n	8004686 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3308      	adds	r3, #8
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	653b      	str	r3, [r7, #80]	; 0x50
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3308      	adds	r3, #8
 80046d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046d8:	637a      	str	r2, [r7, #52]	; 0x34
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e5      	bne.n	80046b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3308      	adds	r3, #8
 80046f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	613b      	str	r3, [r7, #16]
   return(result);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3308      	adds	r3, #8
 800470a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800470c:	623a      	str	r2, [r7, #32]
 800470e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	69f9      	ldr	r1, [r7, #28]
 8004712:	6a3a      	ldr	r2, [r7, #32]
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	61bb      	str	r3, [r7, #24]
   return(result);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e5      	bne.n	80046ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3758      	adds	r7, #88	; 0x58
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	0800484b 	.word	0x0800484b
 8004730:	0800496f 	.word	0x0800496f
 8004734:	080049a7 	.word	0x080049a7

08004738 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	60bb      	str	r3, [r7, #8]
   return(result);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004754:	61fb      	str	r3, [r7, #28]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	6979      	ldr	r1, [r7, #20]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	613b      	str	r3, [r7, #16]
   return(result);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e6      	bne.n	8004740 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004778:	bf00      	nop
 800477a:	3724      	adds	r7, #36	; 0x24
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004784:	b480      	push	{r7}
 8004786:	b095      	sub	sp, #84	; 0x54
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047aa:	643b      	str	r3, [r7, #64]	; 0x40
 80047ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3308      	adds	r3, #8
 80047c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e5      	bne.n	80047be <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d118      	bne.n	800482c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	e853 3f00 	ldrex	r3, [r3]
 8004806:	60bb      	str	r3, [r7, #8]
   return(result);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 0310 	bic.w	r3, r3, #16
 800480e:	647b      	str	r3, [r7, #68]	; 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481c:	6979      	ldr	r1, [r7, #20]
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	e841 2300 	strex	r3, r2, [r1]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1e6      	bne.n	80047fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800483e:	bf00      	nop
 8004840:	3754      	adds	r7, #84	; 0x54
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b09c      	sub	sp, #112	; 0x70
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d170      	bne.n	8004948 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8004866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004868:	2200      	movs	r2, #0
 800486a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800487c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004882:	66bb      	str	r3, [r7, #104]	; 0x68
 8004884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800488c:	65bb      	str	r3, [r7, #88]	; 0x58
 800488e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800489a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e6      	bne.n	800486e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	667b      	str	r3, [r7, #100]	; 0x64
 80048b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3308      	adds	r3, #8
 80048be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048c0:	647a      	str	r2, [r7, #68]	; 0x44
 80048c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e5      	bne.n	80048a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	623b      	str	r3, [r7, #32]
   return(result);
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ea:	663b      	str	r3, [r7, #96]	; 0x60
 80048ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048f4:	633a      	str	r2, [r7, #48]	; 0x30
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e5      	bne.n	80048d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	2220      	movs	r2, #32
 800490c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004912:	2b01      	cmp	r3, #1
 8004914:	d118      	bne.n	8004948 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60fb      	str	r3, [r7, #12]
   return(result);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800492c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69b9      	ldr	r1, [r7, #24]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	617b      	str	r3, [r7, #20]
   return(result);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004952:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004956:	4619      	mov	r1, r3
 8004958:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800495a:	f7fc f8e5 	bl	8000b28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800495e:	e002      	b.n	8004966 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004960:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004962:	f7ff fa49 	bl	8003df8 <HAL_UART_RxCpltCallback>
}
 8004966:	bf00      	nop
 8004968:	3770      	adds	r7, #112	; 0x70
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004980:	2b01      	cmp	r3, #1
 8004982:	d109      	bne.n	8004998 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	b29b      	uxth	r3, r3
 800498e:	4619      	mov	r1, r3
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7fc f8c9 	bl	8000b28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004996:	e002      	b.n	800499e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fa37 	bl	8003e0c <HAL_UART_RxHalfCpltCallback>
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ca:	2b80      	cmp	r3, #128	; 0x80
 80049cc:	d109      	bne.n	80049e2 <UART_DMAError+0x3c>
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b21      	cmp	r3, #33	; 0x21
 80049d2:	d106      	bne.n	80049e2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	f7ff feab 	bl	8004738 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d109      	bne.n	8004a04 <UART_DMAError+0x5e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b22      	cmp	r3, #34	; 0x22
 80049f4:	d106      	bne.n	8004a04 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80049fe:	6978      	ldr	r0, [r7, #20]
 8004a00:	f7ff fec0 	bl	8004784 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0a:	f043 0210 	orr.w	r2, r3, #16
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a14:	6978      	ldr	r0, [r7, #20]
 8004a16:	f7ff fa03 	bl	8003e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a1a:	bf00      	nop
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff f9ed 	bl	8003e20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b088      	sub	sp, #32
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6979      	ldr	r1, [r7, #20]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	613b      	str	r3, [r7, #16]
   return(result);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e6      	bne.n	8004a56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff f9a5 	bl	8003de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9a:	bf00      	nop
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b08c      	sub	sp, #48	; 0x30
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d14a      	bne.n	8004b62 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e043      	b.n	8004b64 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e03c      	b.n	8004b64 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff fd74 	bl	80045ec <UART_Start_Receive_DMA>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d124      	bne.n	8004b5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d11d      	bne.n	8004b56 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2210      	movs	r2, #16
 8004b20:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f043 0310 	orr.w	r3, r3, #16
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6a39      	ldr	r1, [r7, #32]
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e6      	bne.n	8004b22 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8004b54:	e002      	b.n	8004b5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b60:	e000      	b.n	8004b64 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3730      	adds	r7, #48	; 0x30
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <__errno>:
 8004b6c:	4b01      	ldr	r3, [pc, #4]	; (8004b74 <__errno+0x8>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000001c 	.word	0x2000001c

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4d0d      	ldr	r5, [pc, #52]	; (8004bb0 <__libc_init_array+0x38>)
 8004b7c:	4c0d      	ldr	r4, [pc, #52]	; (8004bb4 <__libc_init_array+0x3c>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	2600      	movs	r6, #0
 8004b84:	42a6      	cmp	r6, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	4d0b      	ldr	r5, [pc, #44]	; (8004bb8 <__libc_init_array+0x40>)
 8004b8a:	4c0c      	ldr	r4, [pc, #48]	; (8004bbc <__libc_init_array+0x44>)
 8004b8c:	f000 fca2 	bl	80054d4 <_init>
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	2600      	movs	r6, #0
 8004b96:	42a6      	cmp	r6, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba0:	4798      	blx	r3
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004baa:	4798      	blx	r3
 8004bac:	3601      	adds	r6, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	08005644 	.word	0x08005644
 8004bb4:	08005644 	.word	0x08005644
 8004bb8:	08005644 	.word	0x08005644
 8004bbc:	08005648 	.word	0x08005648

08004bc0 <memset>:
 8004bc0:	4402      	add	r2, r0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d100      	bne.n	8004bca <memset+0xa>
 8004bc8:	4770      	bx	lr
 8004bca:	f803 1b01 	strb.w	r1, [r3], #1
 8004bce:	e7f9      	b.n	8004bc4 <memset+0x4>

08004bd0 <siprintf>:
 8004bd0:	b40e      	push	{r1, r2, r3}
 8004bd2:	b500      	push	{lr}
 8004bd4:	b09c      	sub	sp, #112	; 0x70
 8004bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8004bd8:	9002      	str	r0, [sp, #8]
 8004bda:	9006      	str	r0, [sp, #24]
 8004bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004be0:	4809      	ldr	r0, [pc, #36]	; (8004c08 <siprintf+0x38>)
 8004be2:	9107      	str	r1, [sp, #28]
 8004be4:	9104      	str	r1, [sp, #16]
 8004be6:	4909      	ldr	r1, [pc, #36]	; (8004c0c <siprintf+0x3c>)
 8004be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bec:	9105      	str	r1, [sp, #20]
 8004bee:	6800      	ldr	r0, [r0, #0]
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	a902      	add	r1, sp, #8
 8004bf4:	f000 f87c 	bl	8004cf0 <_svfiprintf_r>
 8004bf8:	9b02      	ldr	r3, [sp, #8]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	b01c      	add	sp, #112	; 0x70
 8004c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c04:	b003      	add	sp, #12
 8004c06:	4770      	bx	lr
 8004c08:	2000001c 	.word	0x2000001c
 8004c0c:	ffff0208 	.word	0xffff0208

08004c10 <strncmp>:
 8004c10:	b510      	push	{r4, lr}
 8004c12:	b17a      	cbz	r2, 8004c34 <strncmp+0x24>
 8004c14:	4603      	mov	r3, r0
 8004c16:	3901      	subs	r1, #1
 8004c18:	1884      	adds	r4, r0, r2
 8004c1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004c1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004c22:	4290      	cmp	r0, r2
 8004c24:	d101      	bne.n	8004c2a <strncmp+0x1a>
 8004c26:	42a3      	cmp	r3, r4
 8004c28:	d101      	bne.n	8004c2e <strncmp+0x1e>
 8004c2a:	1a80      	subs	r0, r0, r2
 8004c2c:	bd10      	pop	{r4, pc}
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d1f3      	bne.n	8004c1a <strncmp+0xa>
 8004c32:	e7fa      	b.n	8004c2a <strncmp+0x1a>
 8004c34:	4610      	mov	r0, r2
 8004c36:	e7f9      	b.n	8004c2c <strncmp+0x1c>

08004c38 <__ssputs_r>:
 8004c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	688e      	ldr	r6, [r1, #8]
 8004c3e:	429e      	cmp	r6, r3
 8004c40:	4682      	mov	sl, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	4690      	mov	r8, r2
 8004c46:	461f      	mov	r7, r3
 8004c48:	d838      	bhi.n	8004cbc <__ssputs_r+0x84>
 8004c4a:	898a      	ldrh	r2, [r1, #12]
 8004c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c50:	d032      	beq.n	8004cb8 <__ssputs_r+0x80>
 8004c52:	6825      	ldr	r5, [r4, #0]
 8004c54:	6909      	ldr	r1, [r1, #16]
 8004c56:	eba5 0901 	sub.w	r9, r5, r1
 8004c5a:	6965      	ldr	r5, [r4, #20]
 8004c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c64:	3301      	adds	r3, #1
 8004c66:	444b      	add	r3, r9
 8004c68:	106d      	asrs	r5, r5, #1
 8004c6a:	429d      	cmp	r5, r3
 8004c6c:	bf38      	it	cc
 8004c6e:	461d      	movcc	r5, r3
 8004c70:	0553      	lsls	r3, r2, #21
 8004c72:	d531      	bpl.n	8004cd8 <__ssputs_r+0xa0>
 8004c74:	4629      	mov	r1, r5
 8004c76:	f000 fb63 	bl	8005340 <_malloc_r>
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	b950      	cbnz	r0, 8004c94 <__ssputs_r+0x5c>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	f8ca 3000 	str.w	r3, [sl]
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c94:	6921      	ldr	r1, [r4, #16]
 8004c96:	464a      	mov	r2, r9
 8004c98:	f000 fabe 	bl	8005218 <memcpy>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca6:	81a3      	strh	r3, [r4, #12]
 8004ca8:	6126      	str	r6, [r4, #16]
 8004caa:	6165      	str	r5, [r4, #20]
 8004cac:	444e      	add	r6, r9
 8004cae:	eba5 0509 	sub.w	r5, r5, r9
 8004cb2:	6026      	str	r6, [r4, #0]
 8004cb4:	60a5      	str	r5, [r4, #8]
 8004cb6:	463e      	mov	r6, r7
 8004cb8:	42be      	cmp	r6, r7
 8004cba:	d900      	bls.n	8004cbe <__ssputs_r+0x86>
 8004cbc:	463e      	mov	r6, r7
 8004cbe:	6820      	ldr	r0, [r4, #0]
 8004cc0:	4632      	mov	r2, r6
 8004cc2:	4641      	mov	r1, r8
 8004cc4:	f000 fab6 	bl	8005234 <memmove>
 8004cc8:	68a3      	ldr	r3, [r4, #8]
 8004cca:	1b9b      	subs	r3, r3, r6
 8004ccc:	60a3      	str	r3, [r4, #8]
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	4433      	add	r3, r6
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	e7db      	b.n	8004c90 <__ssputs_r+0x58>
 8004cd8:	462a      	mov	r2, r5
 8004cda:	f000 fba5 	bl	8005428 <_realloc_r>
 8004cde:	4606      	mov	r6, r0
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d1e1      	bne.n	8004ca8 <__ssputs_r+0x70>
 8004ce4:	6921      	ldr	r1, [r4, #16]
 8004ce6:	4650      	mov	r0, sl
 8004ce8:	f000 fabe 	bl	8005268 <_free_r>
 8004cec:	e7c7      	b.n	8004c7e <__ssputs_r+0x46>
	...

08004cf0 <_svfiprintf_r>:
 8004cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf4:	4698      	mov	r8, r3
 8004cf6:	898b      	ldrh	r3, [r1, #12]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	b09d      	sub	sp, #116	; 0x74
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	460d      	mov	r5, r1
 8004d00:	4614      	mov	r4, r2
 8004d02:	d50e      	bpl.n	8004d22 <_svfiprintf_r+0x32>
 8004d04:	690b      	ldr	r3, [r1, #16]
 8004d06:	b963      	cbnz	r3, 8004d22 <_svfiprintf_r+0x32>
 8004d08:	2140      	movs	r1, #64	; 0x40
 8004d0a:	f000 fb19 	bl	8005340 <_malloc_r>
 8004d0e:	6028      	str	r0, [r5, #0]
 8004d10:	6128      	str	r0, [r5, #16]
 8004d12:	b920      	cbnz	r0, 8004d1e <_svfiprintf_r+0x2e>
 8004d14:	230c      	movs	r3, #12
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e0d1      	b.n	8004ec2 <_svfiprintf_r+0x1d2>
 8004d1e:	2340      	movs	r3, #64	; 0x40
 8004d20:	616b      	str	r3, [r5, #20]
 8004d22:	2300      	movs	r3, #0
 8004d24:	9309      	str	r3, [sp, #36]	; 0x24
 8004d26:	2320      	movs	r3, #32
 8004d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d30:	2330      	movs	r3, #48	; 0x30
 8004d32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004edc <_svfiprintf_r+0x1ec>
 8004d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d3a:	f04f 0901 	mov.w	r9, #1
 8004d3e:	4623      	mov	r3, r4
 8004d40:	469a      	mov	sl, r3
 8004d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d46:	b10a      	cbz	r2, 8004d4c <_svfiprintf_r+0x5c>
 8004d48:	2a25      	cmp	r2, #37	; 0x25
 8004d4a:	d1f9      	bne.n	8004d40 <_svfiprintf_r+0x50>
 8004d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d50:	d00b      	beq.n	8004d6a <_svfiprintf_r+0x7a>
 8004d52:	465b      	mov	r3, fp
 8004d54:	4622      	mov	r2, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f7ff ff6d 	bl	8004c38 <__ssputs_r>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	f000 80aa 	beq.w	8004eb8 <_svfiprintf_r+0x1c8>
 8004d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d66:	445a      	add	r2, fp
 8004d68:	9209      	str	r2, [sp, #36]	; 0x24
 8004d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80a2 	beq.w	8004eb8 <_svfiprintf_r+0x1c8>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d7e:	f10a 0a01 	add.w	sl, sl, #1
 8004d82:	9304      	str	r3, [sp, #16]
 8004d84:	9307      	str	r3, [sp, #28]
 8004d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d8c:	4654      	mov	r4, sl
 8004d8e:	2205      	movs	r2, #5
 8004d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d94:	4851      	ldr	r0, [pc, #324]	; (8004edc <_svfiprintf_r+0x1ec>)
 8004d96:	f7fb fa23 	bl	80001e0 <memchr>
 8004d9a:	9a04      	ldr	r2, [sp, #16]
 8004d9c:	b9d8      	cbnz	r0, 8004dd6 <_svfiprintf_r+0xe6>
 8004d9e:	06d0      	lsls	r0, r2, #27
 8004da0:	bf44      	itt	mi
 8004da2:	2320      	movmi	r3, #32
 8004da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004da8:	0711      	lsls	r1, r2, #28
 8004daa:	bf44      	itt	mi
 8004dac:	232b      	movmi	r3, #43	; 0x2b
 8004dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004db2:	f89a 3000 	ldrb.w	r3, [sl]
 8004db6:	2b2a      	cmp	r3, #42	; 0x2a
 8004db8:	d015      	beq.n	8004de6 <_svfiprintf_r+0xf6>
 8004dba:	9a07      	ldr	r2, [sp, #28]
 8004dbc:	4654      	mov	r4, sl
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	f04f 0c0a 	mov.w	ip, #10
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dca:	3b30      	subs	r3, #48	; 0x30
 8004dcc:	2b09      	cmp	r3, #9
 8004dce:	d94e      	bls.n	8004e6e <_svfiprintf_r+0x17e>
 8004dd0:	b1b0      	cbz	r0, 8004e00 <_svfiprintf_r+0x110>
 8004dd2:	9207      	str	r2, [sp, #28]
 8004dd4:	e014      	b.n	8004e00 <_svfiprintf_r+0x110>
 8004dd6:	eba0 0308 	sub.w	r3, r0, r8
 8004dda:	fa09 f303 	lsl.w	r3, r9, r3
 8004dde:	4313      	orrs	r3, r2
 8004de0:	9304      	str	r3, [sp, #16]
 8004de2:	46a2      	mov	sl, r4
 8004de4:	e7d2      	b.n	8004d8c <_svfiprintf_r+0x9c>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	1d19      	adds	r1, r3, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	9103      	str	r1, [sp, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfbb      	ittet	lt
 8004df2:	425b      	neglt	r3, r3
 8004df4:	f042 0202 	orrlt.w	r2, r2, #2
 8004df8:	9307      	strge	r3, [sp, #28]
 8004dfa:	9307      	strlt	r3, [sp, #28]
 8004dfc:	bfb8      	it	lt
 8004dfe:	9204      	strlt	r2, [sp, #16]
 8004e00:	7823      	ldrb	r3, [r4, #0]
 8004e02:	2b2e      	cmp	r3, #46	; 0x2e
 8004e04:	d10c      	bne.n	8004e20 <_svfiprintf_r+0x130>
 8004e06:	7863      	ldrb	r3, [r4, #1]
 8004e08:	2b2a      	cmp	r3, #42	; 0x2a
 8004e0a:	d135      	bne.n	8004e78 <_svfiprintf_r+0x188>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	9203      	str	r2, [sp, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bfb8      	it	lt
 8004e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e1c:	3402      	adds	r4, #2
 8004e1e:	9305      	str	r3, [sp, #20]
 8004e20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004eec <_svfiprintf_r+0x1fc>
 8004e24:	7821      	ldrb	r1, [r4, #0]
 8004e26:	2203      	movs	r2, #3
 8004e28:	4650      	mov	r0, sl
 8004e2a:	f7fb f9d9 	bl	80001e0 <memchr>
 8004e2e:	b140      	cbz	r0, 8004e42 <_svfiprintf_r+0x152>
 8004e30:	2340      	movs	r3, #64	; 0x40
 8004e32:	eba0 000a 	sub.w	r0, r0, sl
 8004e36:	fa03 f000 	lsl.w	r0, r3, r0
 8004e3a:	9b04      	ldr	r3, [sp, #16]
 8004e3c:	4303      	orrs	r3, r0
 8004e3e:	3401      	adds	r4, #1
 8004e40:	9304      	str	r3, [sp, #16]
 8004e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e46:	4826      	ldr	r0, [pc, #152]	; (8004ee0 <_svfiprintf_r+0x1f0>)
 8004e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e4c:	2206      	movs	r2, #6
 8004e4e:	f7fb f9c7 	bl	80001e0 <memchr>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d038      	beq.n	8004ec8 <_svfiprintf_r+0x1d8>
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <_svfiprintf_r+0x1f4>)
 8004e58:	bb1b      	cbnz	r3, 8004ea2 <_svfiprintf_r+0x1b2>
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	3307      	adds	r3, #7
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	3308      	adds	r3, #8
 8004e64:	9303      	str	r3, [sp, #12]
 8004e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e68:	4433      	add	r3, r6
 8004e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6c:	e767      	b.n	8004d3e <_svfiprintf_r+0x4e>
 8004e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e72:	460c      	mov	r4, r1
 8004e74:	2001      	movs	r0, #1
 8004e76:	e7a5      	b.n	8004dc4 <_svfiprintf_r+0xd4>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	3401      	adds	r4, #1
 8004e7c:	9305      	str	r3, [sp, #20]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f04f 0c0a 	mov.w	ip, #10
 8004e84:	4620      	mov	r0, r4
 8004e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e8a:	3a30      	subs	r2, #48	; 0x30
 8004e8c:	2a09      	cmp	r2, #9
 8004e8e:	d903      	bls.n	8004e98 <_svfiprintf_r+0x1a8>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0c5      	beq.n	8004e20 <_svfiprintf_r+0x130>
 8004e94:	9105      	str	r1, [sp, #20]
 8004e96:	e7c3      	b.n	8004e20 <_svfiprintf_r+0x130>
 8004e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e7f0      	b.n	8004e84 <_svfiprintf_r+0x194>
 8004ea2:	ab03      	add	r3, sp, #12
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <_svfiprintf_r+0x1f8>)
 8004eaa:	a904      	add	r1, sp, #16
 8004eac:	4638      	mov	r0, r7
 8004eae:	f3af 8000 	nop.w
 8004eb2:	1c42      	adds	r2, r0, #1
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	d1d6      	bne.n	8004e66 <_svfiprintf_r+0x176>
 8004eb8:	89ab      	ldrh	r3, [r5, #12]
 8004eba:	065b      	lsls	r3, r3, #25
 8004ebc:	f53f af2c 	bmi.w	8004d18 <_svfiprintf_r+0x28>
 8004ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ec2:	b01d      	add	sp, #116	; 0x74
 8004ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec8:	ab03      	add	r3, sp, #12
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	462a      	mov	r2, r5
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <_svfiprintf_r+0x1f8>)
 8004ed0:	a904      	add	r1, sp, #16
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	f000 f87a 	bl	8004fcc <_printf_i>
 8004ed8:	e7eb      	b.n	8004eb2 <_svfiprintf_r+0x1c2>
 8004eda:	bf00      	nop
 8004edc:	08005608 	.word	0x08005608
 8004ee0:	08005612 	.word	0x08005612
 8004ee4:	00000000 	.word	0x00000000
 8004ee8:	08004c39 	.word	0x08004c39
 8004eec:	0800560e 	.word	0x0800560e

08004ef0 <_printf_common>:
 8004ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef4:	4616      	mov	r6, r2
 8004ef6:	4699      	mov	r9, r3
 8004ef8:	688a      	ldr	r2, [r1, #8]
 8004efa:	690b      	ldr	r3, [r1, #16]
 8004efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f00:	4293      	cmp	r3, r2
 8004f02:	bfb8      	it	lt
 8004f04:	4613      	movlt	r3, r2
 8004f06:	6033      	str	r3, [r6, #0]
 8004f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	460c      	mov	r4, r1
 8004f10:	b10a      	cbz	r2, 8004f16 <_printf_common+0x26>
 8004f12:	3301      	adds	r3, #1
 8004f14:	6033      	str	r3, [r6, #0]
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	0699      	lsls	r1, r3, #26
 8004f1a:	bf42      	ittt	mi
 8004f1c:	6833      	ldrmi	r3, [r6, #0]
 8004f1e:	3302      	addmi	r3, #2
 8004f20:	6033      	strmi	r3, [r6, #0]
 8004f22:	6825      	ldr	r5, [r4, #0]
 8004f24:	f015 0506 	ands.w	r5, r5, #6
 8004f28:	d106      	bne.n	8004f38 <_printf_common+0x48>
 8004f2a:	f104 0a19 	add.w	sl, r4, #25
 8004f2e:	68e3      	ldr	r3, [r4, #12]
 8004f30:	6832      	ldr	r2, [r6, #0]
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	42ab      	cmp	r3, r5
 8004f36:	dc26      	bgt.n	8004f86 <_printf_common+0x96>
 8004f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f3c:	1e13      	subs	r3, r2, #0
 8004f3e:	6822      	ldr	r2, [r4, #0]
 8004f40:	bf18      	it	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	0692      	lsls	r2, r2, #26
 8004f46:	d42b      	bmi.n	8004fa0 <_printf_common+0xb0>
 8004f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	4638      	mov	r0, r7
 8004f50:	47c0      	blx	r8
 8004f52:	3001      	adds	r0, #1
 8004f54:	d01e      	beq.n	8004f94 <_printf_common+0xa4>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	68e5      	ldr	r5, [r4, #12]
 8004f5a:	6832      	ldr	r2, [r6, #0]
 8004f5c:	f003 0306 	and.w	r3, r3, #6
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	bf08      	it	eq
 8004f64:	1aad      	subeq	r5, r5, r2
 8004f66:	68a3      	ldr	r3, [r4, #8]
 8004f68:	6922      	ldr	r2, [r4, #16]
 8004f6a:	bf0c      	ite	eq
 8004f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f70:	2500      	movne	r5, #0
 8004f72:	4293      	cmp	r3, r2
 8004f74:	bfc4      	itt	gt
 8004f76:	1a9b      	subgt	r3, r3, r2
 8004f78:	18ed      	addgt	r5, r5, r3
 8004f7a:	2600      	movs	r6, #0
 8004f7c:	341a      	adds	r4, #26
 8004f7e:	42b5      	cmp	r5, r6
 8004f80:	d11a      	bne.n	8004fb8 <_printf_common+0xc8>
 8004f82:	2000      	movs	r0, #0
 8004f84:	e008      	b.n	8004f98 <_printf_common+0xa8>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4652      	mov	r2, sl
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4638      	mov	r0, r7
 8004f8e:	47c0      	blx	r8
 8004f90:	3001      	adds	r0, #1
 8004f92:	d103      	bne.n	8004f9c <_printf_common+0xac>
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295
 8004f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	e7c6      	b.n	8004f2e <_printf_common+0x3e>
 8004fa0:	18e1      	adds	r1, r4, r3
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	2030      	movs	r0, #48	; 0x30
 8004fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004faa:	4422      	add	r2, r4
 8004fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	e7c7      	b.n	8004f48 <_printf_common+0x58>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	4622      	mov	r2, r4
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	47c0      	blx	r8
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d0e6      	beq.n	8004f94 <_printf_common+0xa4>
 8004fc6:	3601      	adds	r6, #1
 8004fc8:	e7d9      	b.n	8004f7e <_printf_common+0x8e>
	...

08004fcc <_printf_i>:
 8004fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd0:	7e0f      	ldrb	r7, [r1, #24]
 8004fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fd4:	2f78      	cmp	r7, #120	; 0x78
 8004fd6:	4691      	mov	r9, r2
 8004fd8:	4680      	mov	r8, r0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	469a      	mov	sl, r3
 8004fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fe2:	d807      	bhi.n	8004ff4 <_printf_i+0x28>
 8004fe4:	2f62      	cmp	r7, #98	; 0x62
 8004fe6:	d80a      	bhi.n	8004ffe <_printf_i+0x32>
 8004fe8:	2f00      	cmp	r7, #0
 8004fea:	f000 80d8 	beq.w	800519e <_printf_i+0x1d2>
 8004fee:	2f58      	cmp	r7, #88	; 0x58
 8004ff0:	f000 80a3 	beq.w	800513a <_printf_i+0x16e>
 8004ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ffc:	e03a      	b.n	8005074 <_printf_i+0xa8>
 8004ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005002:	2b15      	cmp	r3, #21
 8005004:	d8f6      	bhi.n	8004ff4 <_printf_i+0x28>
 8005006:	a101      	add	r1, pc, #4	; (adr r1, 800500c <_printf_i+0x40>)
 8005008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800500c:	08005065 	.word	0x08005065
 8005010:	08005079 	.word	0x08005079
 8005014:	08004ff5 	.word	0x08004ff5
 8005018:	08004ff5 	.word	0x08004ff5
 800501c:	08004ff5 	.word	0x08004ff5
 8005020:	08004ff5 	.word	0x08004ff5
 8005024:	08005079 	.word	0x08005079
 8005028:	08004ff5 	.word	0x08004ff5
 800502c:	08004ff5 	.word	0x08004ff5
 8005030:	08004ff5 	.word	0x08004ff5
 8005034:	08004ff5 	.word	0x08004ff5
 8005038:	08005185 	.word	0x08005185
 800503c:	080050a9 	.word	0x080050a9
 8005040:	08005167 	.word	0x08005167
 8005044:	08004ff5 	.word	0x08004ff5
 8005048:	08004ff5 	.word	0x08004ff5
 800504c:	080051a7 	.word	0x080051a7
 8005050:	08004ff5 	.word	0x08004ff5
 8005054:	080050a9 	.word	0x080050a9
 8005058:	08004ff5 	.word	0x08004ff5
 800505c:	08004ff5 	.word	0x08004ff5
 8005060:	0800516f 	.word	0x0800516f
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	1d1a      	adds	r2, r3, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	602a      	str	r2, [r5, #0]
 800506c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005074:	2301      	movs	r3, #1
 8005076:	e0a3      	b.n	80051c0 <_printf_i+0x1f4>
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	6829      	ldr	r1, [r5, #0]
 800507c:	0606      	lsls	r6, r0, #24
 800507e:	f101 0304 	add.w	r3, r1, #4
 8005082:	d50a      	bpl.n	800509a <_printf_i+0xce>
 8005084:	680e      	ldr	r6, [r1, #0]
 8005086:	602b      	str	r3, [r5, #0]
 8005088:	2e00      	cmp	r6, #0
 800508a:	da03      	bge.n	8005094 <_printf_i+0xc8>
 800508c:	232d      	movs	r3, #45	; 0x2d
 800508e:	4276      	negs	r6, r6
 8005090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005094:	485e      	ldr	r0, [pc, #376]	; (8005210 <_printf_i+0x244>)
 8005096:	230a      	movs	r3, #10
 8005098:	e019      	b.n	80050ce <_printf_i+0x102>
 800509a:	680e      	ldr	r6, [r1, #0]
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050a2:	bf18      	it	ne
 80050a4:	b236      	sxthne	r6, r6
 80050a6:	e7ef      	b.n	8005088 <_printf_i+0xbc>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	6820      	ldr	r0, [r4, #0]
 80050ac:	1d19      	adds	r1, r3, #4
 80050ae:	6029      	str	r1, [r5, #0]
 80050b0:	0601      	lsls	r1, r0, #24
 80050b2:	d501      	bpl.n	80050b8 <_printf_i+0xec>
 80050b4:	681e      	ldr	r6, [r3, #0]
 80050b6:	e002      	b.n	80050be <_printf_i+0xf2>
 80050b8:	0646      	lsls	r6, r0, #25
 80050ba:	d5fb      	bpl.n	80050b4 <_printf_i+0xe8>
 80050bc:	881e      	ldrh	r6, [r3, #0]
 80050be:	4854      	ldr	r0, [pc, #336]	; (8005210 <_printf_i+0x244>)
 80050c0:	2f6f      	cmp	r7, #111	; 0x6f
 80050c2:	bf0c      	ite	eq
 80050c4:	2308      	moveq	r3, #8
 80050c6:	230a      	movne	r3, #10
 80050c8:	2100      	movs	r1, #0
 80050ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ce:	6865      	ldr	r5, [r4, #4]
 80050d0:	60a5      	str	r5, [r4, #8]
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	bfa2      	ittt	ge
 80050d6:	6821      	ldrge	r1, [r4, #0]
 80050d8:	f021 0104 	bicge.w	r1, r1, #4
 80050dc:	6021      	strge	r1, [r4, #0]
 80050de:	b90e      	cbnz	r6, 80050e4 <_printf_i+0x118>
 80050e0:	2d00      	cmp	r5, #0
 80050e2:	d04d      	beq.n	8005180 <_printf_i+0x1b4>
 80050e4:	4615      	mov	r5, r2
 80050e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ea:	fb03 6711 	mls	r7, r3, r1, r6
 80050ee:	5dc7      	ldrb	r7, [r0, r7]
 80050f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050f4:	4637      	mov	r7, r6
 80050f6:	42bb      	cmp	r3, r7
 80050f8:	460e      	mov	r6, r1
 80050fa:	d9f4      	bls.n	80050e6 <_printf_i+0x11a>
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d10b      	bne.n	8005118 <_printf_i+0x14c>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	07de      	lsls	r6, r3, #31
 8005104:	d508      	bpl.n	8005118 <_printf_i+0x14c>
 8005106:	6923      	ldr	r3, [r4, #16]
 8005108:	6861      	ldr	r1, [r4, #4]
 800510a:	4299      	cmp	r1, r3
 800510c:	bfde      	ittt	le
 800510e:	2330      	movle	r3, #48	; 0x30
 8005110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005118:	1b52      	subs	r2, r2, r5
 800511a:	6122      	str	r2, [r4, #16]
 800511c:	f8cd a000 	str.w	sl, [sp]
 8005120:	464b      	mov	r3, r9
 8005122:	aa03      	add	r2, sp, #12
 8005124:	4621      	mov	r1, r4
 8005126:	4640      	mov	r0, r8
 8005128:	f7ff fee2 	bl	8004ef0 <_printf_common>
 800512c:	3001      	adds	r0, #1
 800512e:	d14c      	bne.n	80051ca <_printf_i+0x1fe>
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	b004      	add	sp, #16
 8005136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513a:	4835      	ldr	r0, [pc, #212]	; (8005210 <_printf_i+0x244>)
 800513c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005140:	6829      	ldr	r1, [r5, #0]
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	f851 6b04 	ldr.w	r6, [r1], #4
 8005148:	6029      	str	r1, [r5, #0]
 800514a:	061d      	lsls	r5, r3, #24
 800514c:	d514      	bpl.n	8005178 <_printf_i+0x1ac>
 800514e:	07df      	lsls	r7, r3, #31
 8005150:	bf44      	itt	mi
 8005152:	f043 0320 	orrmi.w	r3, r3, #32
 8005156:	6023      	strmi	r3, [r4, #0]
 8005158:	b91e      	cbnz	r6, 8005162 <_printf_i+0x196>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	f023 0320 	bic.w	r3, r3, #32
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	2310      	movs	r3, #16
 8005164:	e7b0      	b.n	80050c8 <_printf_i+0xfc>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	f043 0320 	orr.w	r3, r3, #32
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	2378      	movs	r3, #120	; 0x78
 8005170:	4828      	ldr	r0, [pc, #160]	; (8005214 <_printf_i+0x248>)
 8005172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005176:	e7e3      	b.n	8005140 <_printf_i+0x174>
 8005178:	0659      	lsls	r1, r3, #25
 800517a:	bf48      	it	mi
 800517c:	b2b6      	uxthmi	r6, r6
 800517e:	e7e6      	b.n	800514e <_printf_i+0x182>
 8005180:	4615      	mov	r5, r2
 8005182:	e7bb      	b.n	80050fc <_printf_i+0x130>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	6826      	ldr	r6, [r4, #0]
 8005188:	6961      	ldr	r1, [r4, #20]
 800518a:	1d18      	adds	r0, r3, #4
 800518c:	6028      	str	r0, [r5, #0]
 800518e:	0635      	lsls	r5, r6, #24
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	d501      	bpl.n	8005198 <_printf_i+0x1cc>
 8005194:	6019      	str	r1, [r3, #0]
 8005196:	e002      	b.n	800519e <_printf_i+0x1d2>
 8005198:	0670      	lsls	r0, r6, #25
 800519a:	d5fb      	bpl.n	8005194 <_printf_i+0x1c8>
 800519c:	8019      	strh	r1, [r3, #0]
 800519e:	2300      	movs	r3, #0
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	4615      	mov	r5, r2
 80051a4:	e7ba      	b.n	800511c <_printf_i+0x150>
 80051a6:	682b      	ldr	r3, [r5, #0]
 80051a8:	1d1a      	adds	r2, r3, #4
 80051aa:	602a      	str	r2, [r5, #0]
 80051ac:	681d      	ldr	r5, [r3, #0]
 80051ae:	6862      	ldr	r2, [r4, #4]
 80051b0:	2100      	movs	r1, #0
 80051b2:	4628      	mov	r0, r5
 80051b4:	f7fb f814 	bl	80001e0 <memchr>
 80051b8:	b108      	cbz	r0, 80051be <_printf_i+0x1f2>
 80051ba:	1b40      	subs	r0, r0, r5
 80051bc:	6060      	str	r0, [r4, #4]
 80051be:	6863      	ldr	r3, [r4, #4]
 80051c0:	6123      	str	r3, [r4, #16]
 80051c2:	2300      	movs	r3, #0
 80051c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c8:	e7a8      	b.n	800511c <_printf_i+0x150>
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	462a      	mov	r2, r5
 80051ce:	4649      	mov	r1, r9
 80051d0:	4640      	mov	r0, r8
 80051d2:	47d0      	blx	sl
 80051d4:	3001      	adds	r0, #1
 80051d6:	d0ab      	beq.n	8005130 <_printf_i+0x164>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	079b      	lsls	r3, r3, #30
 80051dc:	d413      	bmi.n	8005206 <_printf_i+0x23a>
 80051de:	68e0      	ldr	r0, [r4, #12]
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	4298      	cmp	r0, r3
 80051e4:	bfb8      	it	lt
 80051e6:	4618      	movlt	r0, r3
 80051e8:	e7a4      	b.n	8005134 <_printf_i+0x168>
 80051ea:	2301      	movs	r3, #1
 80051ec:	4632      	mov	r2, r6
 80051ee:	4649      	mov	r1, r9
 80051f0:	4640      	mov	r0, r8
 80051f2:	47d0      	blx	sl
 80051f4:	3001      	adds	r0, #1
 80051f6:	d09b      	beq.n	8005130 <_printf_i+0x164>
 80051f8:	3501      	adds	r5, #1
 80051fa:	68e3      	ldr	r3, [r4, #12]
 80051fc:	9903      	ldr	r1, [sp, #12]
 80051fe:	1a5b      	subs	r3, r3, r1
 8005200:	42ab      	cmp	r3, r5
 8005202:	dcf2      	bgt.n	80051ea <_printf_i+0x21e>
 8005204:	e7eb      	b.n	80051de <_printf_i+0x212>
 8005206:	2500      	movs	r5, #0
 8005208:	f104 0619 	add.w	r6, r4, #25
 800520c:	e7f5      	b.n	80051fa <_printf_i+0x22e>
 800520e:	bf00      	nop
 8005210:	08005619 	.word	0x08005619
 8005214:	0800562a 	.word	0x0800562a

08005218 <memcpy>:
 8005218:	440a      	add	r2, r1
 800521a:	4291      	cmp	r1, r2
 800521c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005220:	d100      	bne.n	8005224 <memcpy+0xc>
 8005222:	4770      	bx	lr
 8005224:	b510      	push	{r4, lr}
 8005226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800522a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800522e:	4291      	cmp	r1, r2
 8005230:	d1f9      	bne.n	8005226 <memcpy+0xe>
 8005232:	bd10      	pop	{r4, pc}

08005234 <memmove>:
 8005234:	4288      	cmp	r0, r1
 8005236:	b510      	push	{r4, lr}
 8005238:	eb01 0402 	add.w	r4, r1, r2
 800523c:	d902      	bls.n	8005244 <memmove+0x10>
 800523e:	4284      	cmp	r4, r0
 8005240:	4623      	mov	r3, r4
 8005242:	d807      	bhi.n	8005254 <memmove+0x20>
 8005244:	1e43      	subs	r3, r0, #1
 8005246:	42a1      	cmp	r1, r4
 8005248:	d008      	beq.n	800525c <memmove+0x28>
 800524a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800524e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005252:	e7f8      	b.n	8005246 <memmove+0x12>
 8005254:	4402      	add	r2, r0
 8005256:	4601      	mov	r1, r0
 8005258:	428a      	cmp	r2, r1
 800525a:	d100      	bne.n	800525e <memmove+0x2a>
 800525c:	bd10      	pop	{r4, pc}
 800525e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005266:	e7f7      	b.n	8005258 <memmove+0x24>

08005268 <_free_r>:
 8005268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800526a:	2900      	cmp	r1, #0
 800526c:	d044      	beq.n	80052f8 <_free_r+0x90>
 800526e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005272:	9001      	str	r0, [sp, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f1a1 0404 	sub.w	r4, r1, #4
 800527a:	bfb8      	it	lt
 800527c:	18e4      	addlt	r4, r4, r3
 800527e:	f000 f913 	bl	80054a8 <__malloc_lock>
 8005282:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <_free_r+0x94>)
 8005284:	9801      	ldr	r0, [sp, #4]
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	b933      	cbnz	r3, 8005298 <_free_r+0x30>
 800528a:	6063      	str	r3, [r4, #4]
 800528c:	6014      	str	r4, [r2, #0]
 800528e:	b003      	add	sp, #12
 8005290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005294:	f000 b90e 	b.w	80054b4 <__malloc_unlock>
 8005298:	42a3      	cmp	r3, r4
 800529a:	d908      	bls.n	80052ae <_free_r+0x46>
 800529c:	6825      	ldr	r5, [r4, #0]
 800529e:	1961      	adds	r1, r4, r5
 80052a0:	428b      	cmp	r3, r1
 80052a2:	bf01      	itttt	eq
 80052a4:	6819      	ldreq	r1, [r3, #0]
 80052a6:	685b      	ldreq	r3, [r3, #4]
 80052a8:	1949      	addeq	r1, r1, r5
 80052aa:	6021      	streq	r1, [r4, #0]
 80052ac:	e7ed      	b.n	800528a <_free_r+0x22>
 80052ae:	461a      	mov	r2, r3
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	b10b      	cbz	r3, 80052b8 <_free_r+0x50>
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	d9fa      	bls.n	80052ae <_free_r+0x46>
 80052b8:	6811      	ldr	r1, [r2, #0]
 80052ba:	1855      	adds	r5, r2, r1
 80052bc:	42a5      	cmp	r5, r4
 80052be:	d10b      	bne.n	80052d8 <_free_r+0x70>
 80052c0:	6824      	ldr	r4, [r4, #0]
 80052c2:	4421      	add	r1, r4
 80052c4:	1854      	adds	r4, r2, r1
 80052c6:	42a3      	cmp	r3, r4
 80052c8:	6011      	str	r1, [r2, #0]
 80052ca:	d1e0      	bne.n	800528e <_free_r+0x26>
 80052cc:	681c      	ldr	r4, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	6053      	str	r3, [r2, #4]
 80052d2:	4421      	add	r1, r4
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	e7da      	b.n	800528e <_free_r+0x26>
 80052d8:	d902      	bls.n	80052e0 <_free_r+0x78>
 80052da:	230c      	movs	r3, #12
 80052dc:	6003      	str	r3, [r0, #0]
 80052de:	e7d6      	b.n	800528e <_free_r+0x26>
 80052e0:	6825      	ldr	r5, [r4, #0]
 80052e2:	1961      	adds	r1, r4, r5
 80052e4:	428b      	cmp	r3, r1
 80052e6:	bf04      	itt	eq
 80052e8:	6819      	ldreq	r1, [r3, #0]
 80052ea:	685b      	ldreq	r3, [r3, #4]
 80052ec:	6063      	str	r3, [r4, #4]
 80052ee:	bf04      	itt	eq
 80052f0:	1949      	addeq	r1, r1, r5
 80052f2:	6021      	streq	r1, [r4, #0]
 80052f4:	6054      	str	r4, [r2, #4]
 80052f6:	e7ca      	b.n	800528e <_free_r+0x26>
 80052f8:	b003      	add	sp, #12
 80052fa:	bd30      	pop	{r4, r5, pc}
 80052fc:	20000310 	.word	0x20000310

08005300 <sbrk_aligned>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4e0e      	ldr	r6, [pc, #56]	; (800533c <sbrk_aligned+0x3c>)
 8005304:	460c      	mov	r4, r1
 8005306:	6831      	ldr	r1, [r6, #0]
 8005308:	4605      	mov	r5, r0
 800530a:	b911      	cbnz	r1, 8005312 <sbrk_aligned+0x12>
 800530c:	f000 f8bc 	bl	8005488 <_sbrk_r>
 8005310:	6030      	str	r0, [r6, #0]
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f000 f8b7 	bl	8005488 <_sbrk_r>
 800531a:	1c43      	adds	r3, r0, #1
 800531c:	d00a      	beq.n	8005334 <sbrk_aligned+0x34>
 800531e:	1cc4      	adds	r4, r0, #3
 8005320:	f024 0403 	bic.w	r4, r4, #3
 8005324:	42a0      	cmp	r0, r4
 8005326:	d007      	beq.n	8005338 <sbrk_aligned+0x38>
 8005328:	1a21      	subs	r1, r4, r0
 800532a:	4628      	mov	r0, r5
 800532c:	f000 f8ac 	bl	8005488 <_sbrk_r>
 8005330:	3001      	adds	r0, #1
 8005332:	d101      	bne.n	8005338 <sbrk_aligned+0x38>
 8005334:	f04f 34ff 	mov.w	r4, #4294967295
 8005338:	4620      	mov	r0, r4
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	20000314 	.word	0x20000314

08005340 <_malloc_r>:
 8005340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005344:	1ccd      	adds	r5, r1, #3
 8005346:	f025 0503 	bic.w	r5, r5, #3
 800534a:	3508      	adds	r5, #8
 800534c:	2d0c      	cmp	r5, #12
 800534e:	bf38      	it	cc
 8005350:	250c      	movcc	r5, #12
 8005352:	2d00      	cmp	r5, #0
 8005354:	4607      	mov	r7, r0
 8005356:	db01      	blt.n	800535c <_malloc_r+0x1c>
 8005358:	42a9      	cmp	r1, r5
 800535a:	d905      	bls.n	8005368 <_malloc_r+0x28>
 800535c:	230c      	movs	r3, #12
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	2600      	movs	r6, #0
 8005362:	4630      	mov	r0, r6
 8005364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005368:	4e2e      	ldr	r6, [pc, #184]	; (8005424 <_malloc_r+0xe4>)
 800536a:	f000 f89d 	bl	80054a8 <__malloc_lock>
 800536e:	6833      	ldr	r3, [r6, #0]
 8005370:	461c      	mov	r4, r3
 8005372:	bb34      	cbnz	r4, 80053c2 <_malloc_r+0x82>
 8005374:	4629      	mov	r1, r5
 8005376:	4638      	mov	r0, r7
 8005378:	f7ff ffc2 	bl	8005300 <sbrk_aligned>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	4604      	mov	r4, r0
 8005380:	d14d      	bne.n	800541e <_malloc_r+0xde>
 8005382:	6834      	ldr	r4, [r6, #0]
 8005384:	4626      	mov	r6, r4
 8005386:	2e00      	cmp	r6, #0
 8005388:	d140      	bne.n	800540c <_malloc_r+0xcc>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	4631      	mov	r1, r6
 800538e:	4638      	mov	r0, r7
 8005390:	eb04 0803 	add.w	r8, r4, r3
 8005394:	f000 f878 	bl	8005488 <_sbrk_r>
 8005398:	4580      	cmp	r8, r0
 800539a:	d13a      	bne.n	8005412 <_malloc_r+0xd2>
 800539c:	6821      	ldr	r1, [r4, #0]
 800539e:	3503      	adds	r5, #3
 80053a0:	1a6d      	subs	r5, r5, r1
 80053a2:	f025 0503 	bic.w	r5, r5, #3
 80053a6:	3508      	adds	r5, #8
 80053a8:	2d0c      	cmp	r5, #12
 80053aa:	bf38      	it	cc
 80053ac:	250c      	movcc	r5, #12
 80053ae:	4629      	mov	r1, r5
 80053b0:	4638      	mov	r0, r7
 80053b2:	f7ff ffa5 	bl	8005300 <sbrk_aligned>
 80053b6:	3001      	adds	r0, #1
 80053b8:	d02b      	beq.n	8005412 <_malloc_r+0xd2>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	442b      	add	r3, r5
 80053be:	6023      	str	r3, [r4, #0]
 80053c0:	e00e      	b.n	80053e0 <_malloc_r+0xa0>
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	1b52      	subs	r2, r2, r5
 80053c6:	d41e      	bmi.n	8005406 <_malloc_r+0xc6>
 80053c8:	2a0b      	cmp	r2, #11
 80053ca:	d916      	bls.n	80053fa <_malloc_r+0xba>
 80053cc:	1961      	adds	r1, r4, r5
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	6025      	str	r5, [r4, #0]
 80053d2:	bf18      	it	ne
 80053d4:	6059      	strne	r1, [r3, #4]
 80053d6:	6863      	ldr	r3, [r4, #4]
 80053d8:	bf08      	it	eq
 80053da:	6031      	streq	r1, [r6, #0]
 80053dc:	5162      	str	r2, [r4, r5]
 80053de:	604b      	str	r3, [r1, #4]
 80053e0:	4638      	mov	r0, r7
 80053e2:	f104 060b 	add.w	r6, r4, #11
 80053e6:	f000 f865 	bl	80054b4 <__malloc_unlock>
 80053ea:	f026 0607 	bic.w	r6, r6, #7
 80053ee:	1d23      	adds	r3, r4, #4
 80053f0:	1af2      	subs	r2, r6, r3
 80053f2:	d0b6      	beq.n	8005362 <_malloc_r+0x22>
 80053f4:	1b9b      	subs	r3, r3, r6
 80053f6:	50a3      	str	r3, [r4, r2]
 80053f8:	e7b3      	b.n	8005362 <_malloc_r+0x22>
 80053fa:	6862      	ldr	r2, [r4, #4]
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	bf0c      	ite	eq
 8005400:	6032      	streq	r2, [r6, #0]
 8005402:	605a      	strne	r2, [r3, #4]
 8005404:	e7ec      	b.n	80053e0 <_malloc_r+0xa0>
 8005406:	4623      	mov	r3, r4
 8005408:	6864      	ldr	r4, [r4, #4]
 800540a:	e7b2      	b.n	8005372 <_malloc_r+0x32>
 800540c:	4634      	mov	r4, r6
 800540e:	6876      	ldr	r6, [r6, #4]
 8005410:	e7b9      	b.n	8005386 <_malloc_r+0x46>
 8005412:	230c      	movs	r3, #12
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	4638      	mov	r0, r7
 8005418:	f000 f84c 	bl	80054b4 <__malloc_unlock>
 800541c:	e7a1      	b.n	8005362 <_malloc_r+0x22>
 800541e:	6025      	str	r5, [r4, #0]
 8005420:	e7de      	b.n	80053e0 <_malloc_r+0xa0>
 8005422:	bf00      	nop
 8005424:	20000310 	.word	0x20000310

08005428 <_realloc_r>:
 8005428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800542c:	4680      	mov	r8, r0
 800542e:	4614      	mov	r4, r2
 8005430:	460e      	mov	r6, r1
 8005432:	b921      	cbnz	r1, 800543e <_realloc_r+0x16>
 8005434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005438:	4611      	mov	r1, r2
 800543a:	f7ff bf81 	b.w	8005340 <_malloc_r>
 800543e:	b92a      	cbnz	r2, 800544c <_realloc_r+0x24>
 8005440:	f7ff ff12 	bl	8005268 <_free_r>
 8005444:	4625      	mov	r5, r4
 8005446:	4628      	mov	r0, r5
 8005448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800544c:	f000 f838 	bl	80054c0 <_malloc_usable_size_r>
 8005450:	4284      	cmp	r4, r0
 8005452:	4607      	mov	r7, r0
 8005454:	d802      	bhi.n	800545c <_realloc_r+0x34>
 8005456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800545a:	d812      	bhi.n	8005482 <_realloc_r+0x5a>
 800545c:	4621      	mov	r1, r4
 800545e:	4640      	mov	r0, r8
 8005460:	f7ff ff6e 	bl	8005340 <_malloc_r>
 8005464:	4605      	mov	r5, r0
 8005466:	2800      	cmp	r0, #0
 8005468:	d0ed      	beq.n	8005446 <_realloc_r+0x1e>
 800546a:	42bc      	cmp	r4, r7
 800546c:	4622      	mov	r2, r4
 800546e:	4631      	mov	r1, r6
 8005470:	bf28      	it	cs
 8005472:	463a      	movcs	r2, r7
 8005474:	f7ff fed0 	bl	8005218 <memcpy>
 8005478:	4631      	mov	r1, r6
 800547a:	4640      	mov	r0, r8
 800547c:	f7ff fef4 	bl	8005268 <_free_r>
 8005480:	e7e1      	b.n	8005446 <_realloc_r+0x1e>
 8005482:	4635      	mov	r5, r6
 8005484:	e7df      	b.n	8005446 <_realloc_r+0x1e>
	...

08005488 <_sbrk_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d06      	ldr	r5, [pc, #24]	; (80054a4 <_sbrk_r+0x1c>)
 800548c:	2300      	movs	r3, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fb fcde 	bl	8000e54 <_sbrk>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_sbrk_r+0x1a>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_sbrk_r+0x1a>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20000318 	.word	0x20000318

080054a8 <__malloc_lock>:
 80054a8:	4801      	ldr	r0, [pc, #4]	; (80054b0 <__malloc_lock+0x8>)
 80054aa:	f000 b811 	b.w	80054d0 <__retarget_lock_acquire_recursive>
 80054ae:	bf00      	nop
 80054b0:	2000031c 	.word	0x2000031c

080054b4 <__malloc_unlock>:
 80054b4:	4801      	ldr	r0, [pc, #4]	; (80054bc <__malloc_unlock+0x8>)
 80054b6:	f000 b80c 	b.w	80054d2 <__retarget_lock_release_recursive>
 80054ba:	bf00      	nop
 80054bc:	2000031c 	.word	0x2000031c

080054c0 <_malloc_usable_size_r>:
 80054c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054c4:	1f18      	subs	r0, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bfbc      	itt	lt
 80054ca:	580b      	ldrlt	r3, [r1, r0]
 80054cc:	18c0      	addlt	r0, r0, r3
 80054ce:	4770      	bx	lr

080054d0 <__retarget_lock_acquire_recursive>:
 80054d0:	4770      	bx	lr

080054d2 <__retarget_lock_release_recursive>:
 80054d2:	4770      	bx	lr

080054d4 <_init>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr

080054e0 <_fini>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr
